---
format: revealjs
---

##  {#use-sass data-menu-title="## Use Sass ##" background="#053660"}

<div class="vertical-center">
<center><div class="custom-subtitle2">Next, create a `styles.scss` file, link to it in `_quarto.yml` (this applies your styles to your Quarto site), and define your Sass variables.</div></center>
<!-- <center><div class="custom-subtitle2">Use a *Syntactically Awesome Stylesheet* ({{< fa brands sass title="Sass logo" >}}) to define variables and quickly customize your website's appearance</div></center> -->
</div>

---

## {#what-is-sass data-menu-title="What is Sass?"}

[What is [Sass](https://sass-lang.com/)?]{.slide-title}

<hr>

:::: {.columns}
::: {.column width="50%"}
<br>

```{r}
#| eval: true 
#| echo: false
#| fig-align: "center"
#| out-width: "50%" 
knitr::include_graphics("images/sass.png")
```

::: {.body-text-xl .teal-text .center-text}
**S**yntactically **A**wesome **S**tyle**s**heets
:::
:::

::: {.column width="50%"}
<br>
<br>
<br>
<br>

::: {.body-text}
- Sass is a **CSS extension** (provides additional features, like variables)
- Sass is a **CSS preprocesser** (converts Sass code into standard CSS, which is a critical step because browsers can’t interpret Sass but *can* interpret CSS)
:::
:::

::::

. . . 

<br>

::: {.body-text .center-text}
I know it might feel like we're getting ahead of ourselves a bit here by talking about Sass *before* CSS, but bear with me!
:::


<!-- ::: {.body-text} -->
<!-- - [Sass](https://sass-lang.com/) stands for **S**yntactically **A**wesome **S**tyle**s**heets and is an extension to CSS (I know, it seems like we're talking about this in an incorrect order, but bear with me). -->
<!-- ::: -->

<!-- ::: {.body-text} -->
<!-- Sass is a CSS **preprocessor** (converts Sass code into standard CSS because browsers can’t interpret Sass) -->
<!-- this means that Sass allows web developers to use Sass syntax and features that don't currently exist in CSS  (e.g. variables, which we'll be using today), then converts that Sass code into standard CSS (browsers don't understand Sass code, but *do* understand CSS). -->
<!-- ::: -->

<!-- ::: {.body-text .center-text} -->
<!-- Quarto has a [number of Sass Variables](https://quarto.org/docs/output-formats/html-themes.html#sass-variables) that you can specify within a `styles.scss` file. -->
<!-- ::: -->

---

## {#why-use-sass1 data-menu-title="Sass reduces repetition"}

[Sass helps to reduce repetition]{.slide-title}

<hr>

::: {.body-text}
Sass extends existing CSS features in a number of exciting ways, but importantly **reduces repetition**. For example, let’s say you’re building a website / web page that uses three colors:
<!-- Stylesheets (e.g. `.css` files) are getting larger and more complex. Sass extends existing CSS features and importantly, reduces repetition. For example, let's say you're working on a website, which uses 3 main colors: -->
:::

<br>

```{r}
#| eval: true 
#| echo: false
#| fig-align: "center"
#| out-width: "10%" 
knitr::include_graphics("images/meds-colors.png")
```

<br>

::: {.body-text .topbr}
You might imagine how often you'll need to type those HEX codes out as you developing your stylesheet...it can get annoying rather quickly.
:::

---

## {#why-use-sass2 data-menu-title="Define Sass variables"}

[Define Sass variables to reduce repetition]{.slide-title2}

<hr>

Sass allows us to **define variables** (in the form `$var-name: value;`) for our colors, which we can reference *instead* of writing out their HEX codes each time. This makes your stylesheet **more readable and easier to update** (e.g. only need to update HEX codes in one spot, not multiple!).

```{sass filename="Example stylesheet (.scss)"}
#| eval: false
#| echo: true
#| code-line-numbers: false
// define Sass vars 
$darkblue: #053660;
$teal: #147C91;
$darkgray: #333333;

// use vars in CSS rules (we'll learn more about how to write CSS soon!) 
h1 {
  font-color: $darkblue;
}

.button-styling {
  background: $teal;
  color: $darkblue; 
  border-color: $darkgray;
}
```

::: {.footer}
**Note:** Sass has two syntaxes – SCSS syntax (`.scss`), shown above, is the most common. It stands for **S**assy **C**ascading **S**tyle**s**heets {{< fa face-smile-beam title="a squinty smiley face" >}}
:::

---

## {#quarto-compiles data-menu-title="Quarto compiles Sass automatically"}

[Quarto automatically compiles Sass]{.slide-title}

<hr>

<br>

::: {.center-text}
Web browsers can interpret CSS ([{{< fa check >}}]{.teal-text} `.css`) but *not* Sass ([{{< fa xmark >}}]{.teal-text} `.scss` or `.sass`). 
:::

. . . 

<br>

::: {.center-text}
Typically, you’d need to **compile (i.e. convert) Sass to CSS**, then link the resulting `.css` file in your HTML.
:::

. . . 

<br>

::: {.center-text}
Lucky for us, **Quarto compiles the contents of a `.scss` file into CSS without any extra steps** -- all we need to do is link to a `.scss` file directly in our website's `_quarto.yml`. 
:::

. . . 

<br>

::: {.body-text-xl .teal-text .center-text}
Let's create our website's `.scss ` stylesheet.
:::

::: {.center-text .teal-text}
(The following slides break this down into ~7 steps)
:::

---

## {#create-scss data-menu-title="Create .scss file"}

[Create a `.scss` file for your website]{.slide-title}

<hr>

<br>

[**1.**]{.teal-text} Create a `.scss` file in your repo's root directory using the `touch` command in the RStudio Terminal (alternatively, use **New Blank File** > **Text File** in the Files pane):

```{bash filename="RStudio Terminal"}
#| eval: false
#| echo: true
#| code-line-numbers: false
touch styles.scss # name it whatever you want
```

<br>

[**2.**]{.teal-text} Add the `/*-- scss:defaults --*/` region decorator to the top of `styles.scss` ([required by Quarto](https://quarto.org/docs/output-formats/html-themes-more.html)) -- you'll write all your Sass variables underneath this.

```{sass filename="styles.scss"}
#| eval: false
#| echo: true
#| code-line-numbers: false
/*-- scss:defaults --*/
```

<br>

::: {.center-text .body-text-m}
Adding the region decorator as written above is ***critical!*** Quarto won't recognize your `.scss` file without it.
:::

---

## {#link-scss data-menu-title="Link .scss in _quarto.yml"}

[Link to your `.scss` file in `_quarto.yml`]{.slide-title}

<hr>

[**3.**]{.teal-text} Apply your `styles.scss` file to your website using the `theme` option: 

```{r filename="styles.scss"}
#| eval: false
#| echo: true
#| code-line-numbers: "32"
project:
  type: website
  output-dir: docs

website:
  title: "Sam Csik"
  favicon: file/path/to/image.png 
  navbar:
    title: false 
    logo: file/path/to/logo.png
    logo-alt: "Alt text for logo"
    right:
      - href: index.qmd
        text: Home
      - about.qmd
      - href: resources.qmd
        text: Resources
      - href: cv/myCV.pdf
        text: CV
        target: _blank
      - icon: github
        href: https://github.com/samanthacsik
        target: _blank
  page-footer:
    background: light
    left: Copyright 2021, Samantha Csik
    right: This website is built with {{< fa heart title="a heart" >}}, [{{< fa brands github title="GitHub octocat logo" >}}](https://github.com/samanthacsik/samanthacsik.github.io){target=_blank}, [{{< fa brands r-project title="R Project" >}}](https://www.r-project.org/about.html){target=_blank} and [Quarto](https://quarto.org/){target=_blank}


format:
  html:
    theme: styles.scss # I've also removed the `css: styles.css` option that was included by default, since I'll be writing all my sass and css in this single styles.scss file
    toc: true
    page-layout: full
```

---

## {#define-colors data-menu-title="Define colors variables"}

[Define some color variables]{.slide-title}

<hr> 

[**4.**]{.teal-text} I like to start by defining the colors I want to use throughout my site. For example:

```{sass filename="styles.scss"}
#| eval: false
#| echo: true
#| code-line-numbers: "3-9"
/*-- scss:defaults --*/

// Colors
$dark-green: #858E79;
$light-green: #D1D9CE;
$cream: #FDFBF7;
$gray: #64605f;
$purple: #9158A2;
$orange: #ad7237;
```

<br>

You can also define values with units, e.g. `$my-font-size: 25px;`.

::: {.footer}
**Note:** In `.scss` files, `//` denote single line comments. Multi-line comments start with `/*` and end at the next `*/`.
:::

---

## {#define-quarto-sass1 data-menu-title="Define Quarto Sass variables (rendered)"}

[Define Quarto's Sass variables]{.slide-title}
<!-- [Make sweeping colorful updates using Quarto's Sass variables]{.slide-title3} -->

<hr>

[**5.**]{.teal-text} Quarto provides a [list of Sass Variables](https://quarto.org/docs/output-formats/html-themes.html#sass-variables) that can be specified within `.scss` files. We can assign our newly minted color variables *as values* to specific Quarto Sass variables to easily update things like the background color, navbar & footer colors, hyperlink color, and more.

<br>

```{r}
#| eval: true 
#| echo: false
#| fig-align: "center"
#| out-width: "10%" 
knitr::include_graphics("images/quarto-sass-updates.png")
```

---

## {#define-quarto-sass2 data-menu-title="Define Quarto Sass variables (code)"}
<!-- ## {#define-quarto-sass-vars data-menu-title="Define Quarto Sass variables"} -->

[Define Quarto's Sass variables]{.slide-title}

<hr>

Use the syntax `$quarto-var: $your-color-var;`.

```{sass filename="styles.scss"}
#| eval: false
#| echo: true
#| code-line-numbers: "11-25"
/*-- scss:defaults --*/

// Colors
$dark-green: #858E79;
$light-green: #D1D9CE;
$cream: #FDFBF7;
$gray: #64605f;
$purple: #9158A2;
$orange: #ad7237;

// Base document colors
$navbar-bg: $cream; // navbar
$navbar-fg: $dark-green; // navbar foreground elements
$navbar-hl: $purple; // highlight color when hovering over navbar links
$body-bg: $light-green; // page background 
$body-color: $gray; // page text 
$footer-bg: $cream; // footer 
$link-color: $purple; // hyperlinks 

// Inline code
$code-bg: $cream; // inline code background color
$code-color: $purple; // inline code text color
```

---

## {#combine-themes data-menu-title="Combining themes"}

[You can combine pre-built themes and stylesheets]{.slide-title2}

<hr>

You also *do not* need to create a theme entirely from scratch! If you like parts of a pre-built [Bootswatch theme](https://bootswatch.com/), you can modify it by layering on your desired updates using your own custom `styles.scss` file. 

For example, let's say I love everything about the pre-built [cosmo](https://bootswatch.com/cosmo/) theme, and only want to update the navbar background color to orange. My files might look something like this:  

<br>

:::: {.columns}

::: {.column width="33%"}
```{r filename="_quarto.yml"}
#| eval: false
#| echo: true
#| code-line-numbers: "5-7"
# additional metadata excluded for brevity ~

format:
  html:
    theme: 
      - cosmo
      - styles.scss
    toc: false
    page-layout: full
```
:::

::: {.column width="33%"}
```{sass filename="styles.scss"}
#| eval: false
#| echo: true
/*-- scss:defaults --*/

$orange: #ad7237;
$navbar-bg: $orange;
```
:::

::: {.column width="33%"}
```{r}
#| eval: true
#| echo: false
#| out-width: "100%"
#| fig-align: "center"
knitr::include_graphics("images/orange-navbar.png")
```

::: {.center-text .body-text-s .gray-text}
Our resulting website, which is primarily themed using `cosmo`, but with a custom orange navbar.
:::
:::

::::
