---
format: revealjs
---

##  {#use-sass data-menu-title="Use Sass" background="#053660"}

<div class="vertical-center">
<center><div class="custom-subtitle2">Use a *Syntactically Awesome Stylesheet* (`r fontawesome::fa("sass", fill = "#d2e3f3", a11y = "sem")`) to define variables for use throughout your website </div></center>
</div>

---

## {#what-is-sass data-menu-title="What is Sass?"}

[What is Sass?]{.slide-title}

<hr>

::: {.body-text}
[Sass](https://sass-lang.com/) stands for **S**yntactically **A**wesome **S**tyle**s**heets and is an extension to CSS (I know, it seems like we're talking about this in an incorrect order, but bear with me).
:::

::: {.body-text}
Sass is a CSS **preprocessor** -- this means that Sass allows web developers to use Sass syntax and features that don't currently exist in CSS  (e.g. variables, which we'll be using today), then converts that Sass code into standard CSS (browsers don't understand Sass code, but *do* understand CSS).
:::

::: {.body-text}
Quarto has a [number of Sass Variables](https://quarto.org/docs/output-formats/html-themes.html#sass-variables) that you can specify within a `mystyles.scss` file.
:::

```{r}
#| eval: true 
#| echo: false
#| fig-align: "center"
#| out-width: "50%" 
knitr::include_graphics("images/sass.png")
```

---

## {#why-use-sass1 data-menu-title="Why use Sass?"}

[Why use Sass?]{.slide-title}

<hr>

::: {.body-text}
Stylesheets (e.g. `.css` files) are getting larger and more complex. Sass extends existing CSS features and importantly, reduces repetition. For example, let's say you're working on a website, which uses 3 main colors:
:::

```{r}
#| eval: true 
#| echo: false
#| fig-align: "center"
#| out-width: "10%" 
knitr::include_graphics("images/meds-colors.png")
```

::: {.body-text .topbr}
You might imagine how often you'll need to type those HEX codes out as you developing your stylesheet...it can get annoying rather quickly.
:::

---

## {#why-use-sass2 data-menu-title="Why use Sass?"}

[Why use Sass?]{.slide-title}

<hr>

::: {.smaller-body-text}
Sass allows us to define variables (in the form `$var-name: value;`) for our colors to reference instead of writing out their HEX codes each time:
:::

```{css}
#| eval: false
#| echo: true

/* -- define Sass vars --*/
$darkblue: #053660;
$teal: #147C91;
$darkgray: #333333;

/*-- use vars in CSS rules (we'll learn more about how to write CSS soon!) --*/
h1 {
  font-color: $darkblue;
}

.button-styling {
  background: $teal;
  color: $darkblue; 
  border-color: $darkgray;
}
```

::: {.smaller-body-text .topbr}
If you decide that you actually like a *different* shade of teal better, you'll only need to update the hex code where you first define the `$teal` Sass variable, saving lots of time.
:::

---

## {#quarto-sass-vars data-menu-title="Quarto Sass Variables"}

[Create a `.scss` file for your website]{.slide-title}

<hr>

::: {.caption-text .topbr .bottombr}
**1.** Create a `.scss` file in the root directory of your website's repo using the `touch` command in the RStudio terminal:
:::

```{bash}
#| eval: false
#| echo: true
touch mystyles.scss # name it whatever you want (you can apply more than one style sheet to your website)
```

. . .

::: {.caption-text .topbr .bottombr}
**2.** Add the `/*-- scss:defaults --*/` region decorator to the top of `mystyles.scss` ([required by Quarto](https://quarto.org/docs/output-formats/html-themes-more.html)) -- you'll write all your Sass variables underneath this.
:::

```{css}
#| eval: false
#| echo: true

/*-- scss:defaults --*/
```

. . .

::: {.caption-text .topbr .bottombr}
**3.** Apply your `mystyles.scss` stylesheet to your website by updating the `_quarto.yml` under the `format` section:
:::

```{r}
#| eval: false
#| echo: true
#| code-line-numbers: "9-10"
project:
   # ~ additional YAML omitted for brevity ~

website:
  # ~ additional YAML omitted for brevity ~
  
format:
  html:
   theme: 
      - mystyles.scss
    toc: true
```

---

## {#sass-colors data-menu-title="Sass Colors"}

[Create Sass variables for your website's primary colors]{.slide-title-smaller}

<hr>

::: {.body-text .topbr}
We can quickly change the color theme of our website by defining just a few Sass variables in a `.scss` file. Let's first define the colors we want to use throughout our site. For me, that looks like this:
:::

```{css}
#| eval: false
#| echo: true

/*-- scss:defaults --*/

// Colors
$light-sage-green: #D1D9CE;
$dark-sage-green: #98A08D;
$cream: #FDFBF7;
$gray: #64605f;
$light-gray: #949799;
$purple: #AE8BD1;
```

::: {.body-text .topbr}
You can also define values with units, e.g. `$my-font-size: 25px;` or `$my-width: 500px;`.
:::

<br>

::: {.caption-text .gray-text .topbr}
In `.scss` files, `//` denote single line comments. Multi-line comments start with `/*` and end at the next `*/`.
:::

---

## {#use-sass-colors data-menu-title="Use Sass Colors"}

[Use your color variables as values for Quarto's list of Sass Variables]{.slide-title-smallest}

<hr>

::: {.caption-text .topbr}
Quarto provides a [list of Sass Variables](https://quarto.org/docs/output-formats/html-themes.html#sass-variables) that can be specified within `.scss` files. Let's use our newly minted Sass color variables to change things like the background color, navbar & footer colors, hyperlink color, and more.
:::

::: {.panel-tabset}

## `mystyles.scss` file
```{css}
#| eval: false
#| echo: true
#| code-line-numbers: "11-25"
/*-- scss:defaults --*/

// Colors
$light-sage-green: #D1D9CE;
$dark-sage-green: #98A08D;
$cream: #FDFBF7;
$gray: #64605f;
$light-gray: #949799;
$purple: #AE8BD1;

// Base document colors
$navbar-bg: $cream; // navbar
$navbar-fg: $dark-sage-green; // navbar foreground elements
$navbar-hl: $purple; // highlight color when hovering over navbar links
$body-bg: $light-sage-green; // page background 
$body-color: $gray; // page text 
$footer-bg: $cream; // footer 
$link-color: $purple; // hyperlinks 

// Inline code
$code-bg: $cream; // inline code background color
$code-color: $purple; // inline code text color

// Code blocks
$code-block-bg: $cream; // code block background color
```

## Output

```{r}
#| eval: true 
#| echo: false
#| fig-align: "center"
#| out-width: "45%" 
knitr::include_graphics("images/sass_colors.png")
```

## Notes

::: {.smaller-body-text .topbr}
**{{< fa angle-right >}}** Okay, tell me that that doesn't already look so much better?!
:::

::: {.smaller-body-text .topbr}
**{{< fa angle-right >}}** You don't have to create a theme entirely from scratch! If you like parts of a pre-built Bootswatch theme (e.g. [cosmo](https://bootswatch.com/cosmo/)), you can modify it by layering on your desired updates. See the [Quarto documentation](https://quarto.org/docs/output-formats/html-themes.html#customizing-themes) for more details.
:::

:::

