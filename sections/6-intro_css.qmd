---
format: revealjs
---

##  {#light-intro-css data-menu-title="Light intro to CSS" background="#047C90"}

<div class="page-center">
<div class="custom-subtitle">A *light* introduction to CSS {{< fa brands css3-alt title="the CSS 3 logo" >}}</div>
</div>

---

##  {#css-rules data-menu-title="CSS rules"}

[CSS is a rule-based language]{.slide-title}

<hr>

CSS is a rule-based language, meaning that it allows you to **define groups of styles that should be applied to particular elements or groups of elements on a web page.** 

For example, *"I want all level one (`<h1>`) headings to be green text with a bit of extra space between each letter"* could be coded as:

<br>

:::: {.columns}

::: {.column width="50%"}

```{r}
#| eval: true 
#| echo: false
#| fig-align: "center"
#| out-width: "90%" 
knitr::include_graphics("images/CSS_syntax.png")
```

:::

::: {.column width="50%"}

- [[**Selectors**]{.teal-text} select the HTML element(s) you want to style *(e.g. level one headings, `<h1>`)*]{.body-text-s}

- [[**Declarations**]{.teal-text} sit inside curly brackets, `{}`, and are made up of **property** and **value** pairs. Each pair specifies the property of the HTML element(s) you're selecting *(e.g. the color property of the element `<h1>`)*, and a value you'd like to assign to that property *(e.g. green)*]{.body-text-s}

- [A property and its corresponding value are separated by a colon, `:`. Declarations end with a semicolon, `;`]{.body-text-s}

:::

::::

---

##  {#selector-types data-menu-title="Types of Selectors"}

[There are a number of different CSS selector types]{.slide-title2}

<hr>

The next few slides review just a few basic CSS selector types for styling HTML elements -- these will get you far in your website customization journey (but check out you can learn more about all the [different categories of CSS selectors here](https://www.w3schools.com/css/css_selectors.asp)):

<br>

- [**Element selectors:**]{.teal-text} selects all HTML elements with the specified element name

- [**Grouping selectors:**]{.teal-text} selects all HTML elements with the same style definitions

- [**ID selectors:**]{.teal-text} uses the id attribute of an HTML element to select a specific element; id of an element is unique within a page, so the id selector is used to select one unique element

- [**Class selectors:**]{.teal-text} selects HTML elements with a specific class attribute

- [**Universal selector:**]{.teal-text} selects all HTML elements on the page

- [**Inline styling:**]{.teal-text} (not a selector type, but an alternative way to apply CSS styling)

---

##  {#select-tags data-menu-title="Element & Grouping Selectors"}

[Select an element(s) based on its tag]{.slide-title}

<hr>

::: {.panel-tabset}

## Element Selectors

::: {.body-text}
Any HTML element can be used as a selector. The declarations specified apply to all HTML elements of that type.
:::

:::: {.columns}
::: {.column width="60%"}

[**CSS**]{.body-text}

```{css}
#| eval: false
#| echo: true
h1 {
  color: green;
  letter-spacing: 5px;
}
```

[**HTML**]{.body-text .topbr}

```{html}
#| eval: false
#| echo: true
<h1>My level one header will be styled</h1>
<h2>This level two header will not be styled</h2>
<p>Neither will this paragaph</p>
<h1>But this second level one header will be</h1>
```
:::
::: {.column width="40%"}

<br>
<br>

::: {.body-text .center-text .topbr}
**Output**
:::

```{r}
#| eval: true 
#| echo: false
#| fig-align: "center"
#| out-width: "90%" 
knitr::include_graphics("images/element_selector.png")
```

:::
::::

## Grouping Selectors

::: {.body-text}
Group multiple element selectors together (separated by commas) if you want them all styled the same way.
:::

:::: {.columns}
::: {.column width="60%"}

[**CSS**]{.body-text}

```{css}
#| eval: false
#| echo: true
h1, h2, p {
  text-align: center;
  color: purple;
}
```

[**HTML**]{.body-text .topbr}

```{html}
#| eval: false
#| echo: true
<h1>My level one header will be styled</h1>
<h2>This level two header will be styled</h2>
<h3>This level three header will not be styled</h3>
<p>This paragraph will be styled</p>
```

:::
::: {.column width="40%"}
<br>
<br>

::: {.body-text .center-text .topbr}
**Output**
:::

```{r}
#| eval: true 
#| echo: false
#| fig-align: "center"
#| out-width: "90%" 
knitr::include_graphics("images/grouping_selector.png")
```

:::
::::

:::

---

##  {#select-attributes data-menu-title="ID & Class Selectors"}

[Target element(s) using HTML attributes]{.slide-title2}

<!-- Select an element(s) using attributes -->

<hr>

::: {.panel-tabset}

## ID Selectors

::: {.body-text}
An ID selector uses the *`id` attribute* of an HTML element to style that specific element. IDs must be unique within a page and therefore can only be used to select and style *one* unique element. ID selectors are written using a `#` followed by the selector name, e.g. `#selector`.
:::

:::: {.columns}
::: {.column width="60%"}

[**CSS**]{.body-text}

```{css}
#| eval: false
#| echo: true
#para1 {
  color: red;
  text-align: center;
}
```

[**HTML**]{.body-text .topbr}

```{html}
#| eval: false
#| echo: true
<p id="para1">My first paragraph is styled</p>
<p>But my second paragraph is not</p>
```
:::
::: {.column width="40%"}
<br>
<br>

::: {.body-text .center-text .topbr}
**Output**
:::

```{r}
#| eval: true 
#| echo: false
#| fig-align: "center"
#| out-width: "90%" 
knitr::include_graphics("images/id_selector.png")
```

:::
::::

## Class Selectors

::: {.body-text-s}
A class selector uses the *`class` attribute* of an HTML element to style that specific element. Class selectors are written using a `.` followed by the selector name, e.g. `.selector`. HTML elements can have more than one class, e.g. `<p class="class1 class2">`
:::

:::: {.columns}
::: {.column width="50%"}

[**CSS**]{.body-text .topbr}

```{css}
#| eval: false
#| echo: true
.blue-italicized {
  color: blue;
  font-style: italic;
}
```

[**HTML**]{.body-text .topbr}

```{html}
#| eval: false
#| echo: true
<p class="blue-italicized">My first paragraph is styled</p>
<p>But my second paragraph is not</p>
```
:::
::: {.column width="50%"}
<br>

::: {.body-text .center-text .topbr}
**Output**
:::

```{r}
#| eval: true 
#| echo: false
#| fig-align: "center"
#| out-width: "60%" 
knitr::include_graphics("images/class_selector.png")
```

:::
::::

<br>

::: {.center-text}
*If you're like me, you'll probably find yourself using **class selectors** most often!*
:::

:::

---

##  {#universal-inline data-menu-title="Universal & Inline Selectors"}

[Select all elements or style inline]{.slide-title}

<hr>

::: {.panel-tabset}
## Universal Selector

::: {.body-text}
The universal selector selects *all* HTML elements on the page. It is written using only an asterisk, `*`.
:::

:::: {.columns}
::: {.column width="50%"}

[**CSS**]{.body-text .topbr}

```{css}
#| eval: false
#| echo: true
* {
  text-align: center;
  color: orange;
}
```

[**HTML**]{.body-text .topbr}

```{html}
#| eval: false
#| echo: true
<h1>My level one header will be styled</h1>
<h2>This level two header will be styled</h2>
<p>This paragaph will also be styled</p>
```
:::
::: {.column width="50%"}
<br>
<br>

::: {.body-text .center-text .topbr}
**Output**
:::

```{r}
#| eval: true 
#| echo: false
#| fig-align: "center"
#| out-width: "60%" 
knitr::include_graphics("images/universal_selector.png")
```

:::
::::

## Inline styling

::: {.body-text-s}
The *`style` attribute* may be used inline to apply unique styles to a single element. It's best practice to use these sparingly as it mixes content (HTML) with presentation (CSS) and cannot be reused with other elements like defined CSS rules can.
:::

:::: {.columns}

::: {.column width="50%"}
[**HTML with inline styling**]{.body-text .topbr}

```{html}
#| eval: false
#| echo: true
<p>This is a normal paragraph</p>
<p style="color: red; font-style: italic;">This paragraph has inline styling</p>
<p>Here, only the word <span style="color: red; font-style: italic;">paragraph</span> is styled</p>
```

:::

::: {.column width="50%"}
[**Output**]{.body-text .topbr}

```{r}
#| eval: true 
#| echo: false
#| fig-align: "center"
#| out-width: "60%" 
knitr::include_graphics("images/inline_styling.png")
```

:::

::::

::: {.body-text-s}
**Note:** You can also use the `<span>` tag to apply class or ID selectors to *part* of an element (e.g. let's say I have a class selector, `.blue-text{color: blue;}`. I can target parts of HTML elements using this selector in conjunction with the `<span>` tag: `<p>In this sentence, only the word <span class="blue-text">blue</span> is styled.</p>`)
:::

:::

---

##  {#conflicting-css data-menu-title="Conflicting CSS rules"}

[Conflicting CSS rules?]{.slide-title}

<hr>

::: {.body-text-s .topbr}
It is often the case that more than one CSS rule will point to the same element. For example, say you have a style sheet and HTML that look like the following:
:::

:::: {.columns}
::: {.column width="50%"}

[**CSS**]{.body-text .topbr}

```{css}
#| eval: false
#| echo: true
* {
  color: orange;
}

h1 {
  color: blue;
}

.green-text {
  color: green;
}
```
:::
::: {.column width="50%"}

[**HTML**]{.body-text .topbr}

```{html}
#| eval: false
#| echo: true
<h1>This is my header</h1>
<p>This is my paragraph with <span style="green-text">some green text</span></p>
```
:::
::::

::: {.body-text-s .topbr}
In this case, we have a universal selector that styles all of our text orange, but we also have an element selector that colors our `<h1>` elements blue and a class selector that is applied inline to color a subset of text green. How do you know which style will be declared and applied to each of our HTML elements?
:::

---

##  {#css-specificity data-menu-title="CSS Specificity"}

[The highest specificity value "wins"]{.slide-title}

<hr>

::: {.body-text-s .topbr}
[Specificity](https://www.w3schools.com/css/css_specificity.asp) can be complicated (especially when you consider all the other types of selectors we haven't covered in these slides). For the purposes of this workshop and getting started on your CSS journeys, a general rule of thumb is as follows: Inline styles are the most specific and will override ID selectors, which will override class selectors, which will override element selectors, etc. The order that rules are written in your stylesheet matters as well -- since rules are read top to bottom, a directly competing rule farther down your stylesheet will take precedent.
:::

:::: {.columns}
::: {.column width="50%"}
<br>

::: {.body-text .center-text .topbr .bottombr}
**Inline Styles**
:::

::: {.body-text .center-text .topbr .bottombr}
**IDs**
:::

::: {.body-text .center-text .topbr .bottombr}
**Class Selectors**
:::

::: {.body-text .center-text .topbr .bottombr}
**Element Selectors**
:::

::: {.body-text .center-text .topbr .bottombr}
**Universal Selectors**
:::

:::
::: {.column width="50%"}
```{r}
#| eval: true 
#| echo: false
#| fig-align: "left"
#| out-width: "60%" 
knitr::include_graphics("images/specificity_arrow.png")
```
:::
::::

::: {.notes}
Some great resources for learning more about CSS specificity: the [CSS Specificity](https://www.w3schools.com/css/css_specificity.asp) chapter by W3Schools, the [Specificity](https://developer.mozilla.org/en-US/docs/Web/CSS/Specificity) article by mdn web docs, the [CSS Specificity explained](https://www.youtube.com/watch?v=c0kfcP_nD9E) YouTube video by Kevin Powell, and the [Specificity Calculator](https://specificity.keegan.st/) by Keegan Street.
:::

<!-- --- -->

<!-- ##  {#css-practice0 data-menu-title="Practice CSS (0/3)" background="#053660"} -->

<!-- <div class = "vertical-center"> -->

<!-- <center><div class="custom-subtitle2">`r fontawesome::fa("laptop-code", fill = "#d2e3f3", a11y = "sem")` Practice writing and applying some CSS rules</div></center> -->

<!-- </div> -->

---

##  {#css-practice1 data-menu-title="Practice CSS (1/3)"}

[Practice writing CSS (1/3)]{.slide-title}

<hr>

[**1.**]{.teal-text} Create a new CSS file inside `DELETE-LATER/` named `practcies-styles.css` using either the `touch` command or the **Blank File** > **Text File** option.

<br>

. . .

[**2.**]{.teal-text} Link your CSS file inside the `<head>` of your HTML file (you can [read more](https://www.w3schools.com/css/css_howto.asp) about inserting style sheets).

```{html filename="~/DELETE-LATER/practice-html.html"} 
#| eval: false
#| echo: true
#| code-line-numbers: "5"
<!DOCTYPE html> <!-- All HTML docs start with a doc type declaration-->
<html> <!-- This tag represents the root of the HTML doc -->
<head>
 <!-- Write any metadata about the HTML doc here (inluding the link to an external CSS file) -->
 <link rel="stylesheet" href="practice-styles.css"> 
</head>
<body> 
  <!-- Write all the contents of the HTML doc here -->
  <h1>Here is my level one header</h1>
  <p>Here is my first paragraph</p>
  <p>Here is my second paragraph, where you can read more about <a href="https://ucsb-meds.github.io/">MEDS</a>.</p>
  <p>This is very important text!</p>
</body>
</html>
```

---

##  {#css-practice2 data-menu-title="Practice CSS (2/3)"}

[Practice writing CSS (2/3)]{.slide-title}

<hr>

[**3.**]{.teal-text} Write some CSS selectors in your `practice-styles.css` file and save. Update your HTML file as necessary (e.g. using class selectors) to apply your styles and **Preview** `practice-html.html` to see the updates. Some suggestions:

::: {.body-text-s .topbr}
[**(a)**]{.teal-text} create an `<h1>` element selector that styles the background color to something of your choosing ([hex and rgb codes](https://htmlcolorcodes.com/) allowed!), rounds the edges of the background box, increases the spacing between each letter, *and* centers the text on the page,
:::

::: {.body-text-s}
[**(b)**]{.teal-text} create an element selector that changes the color of hyperlinked text and italicizes it
:::

::: {.body-text-s}
[**(c)**]{.teal-text} create a class selector that you can use to color your first paragraph ("Here is my first paragraph") blue,
:::

::: {.body-text-s}
[**(d)**]{.teal-text} create a class selector to that you can use to color your third paragraph ("This is very important text!") red and enlarge the font size (try `20px`),
:::

::: {.body-text-s}
[**(e)**]{.teal-text} use your class selector from **Step c** *inline* to color just the word "very" (in your third paragraph) blue
:::

<br>

::: {.center-text}
It'll be especially helpful to explore this list of available [CSS properties](https://www.w3schools.com/cssref/).
:::

<br>

::: {.body-text-xl .teal-text .center-text}
(One) solution on next slide!
:::

---

##  {#css-practice-answer data-menu-title="Practice CSS (3/3)"}

[Practice writing CSS (3/3)]{.slide-title}

<hr>

::: {.panel-tabset}

## CSS
```{css filename="~/DELETE-LATER/practice-styles.css"}
#| eval: false
#| echo: true
/* ------- element selectors ------- */

/* style level one headers */
h1 {
  background-color: #49bf96;
  border-radius: 25px;
  letter-spacing: 5px;
  text-align: center;
}

/* purple italicized hyperlinks */
a {
  color: purple;
  font-style: italic;
}

/* ------- class selectors ------- */

/* blue text */
.blue-text {
  color: blue;
}

/* large red text */
.important-text {
  color: red;
  font-size: 30px;
}
```

## HTML 
```{html filename="~/DELETE-LATER/practice-html.html"}
#| eval: false
#| echo: true
<!DOCTYPE html> <!-- All HTML docs start with a doc type declaration-->
<html> <!-- This tag represents the root of the HTML doc -->
<head>
 <!-- Write any metadata about the HTML doc here (inluding the link to an external CSS file) -->
 <link rel="stylesheet" href="practice-styles.css">
</head>
<body> 
  <!-- Write all the contents of the HTML doc here -->
  <h1>Here is my level one header</h1>
  <p class="blue-text">Here is my first paragraph</p>
  <p>Here is my second paragraph, where you can read more about <a href="https://ucsb-meds.github.io/">MEDS</a>.</p>
  <p class="important-text">This is <span class="blue-text">very</span> important text!</p>
</body>
</html>
```

## Rendered HTML

```{r}
#| eval: true 
#| echo: false
#| fig-align: "center"
#| out-width: "90%" 
knitr::include_graphics("images/solution.png")
```

:::


