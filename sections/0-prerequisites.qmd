---
format: revealjs
---

## {#prerequisites data-menu-title="Prerequisites"}

[{{< fa check title="check mark" >}} Prerequisites]{.slide-title}

<hr>

::: {.body-text}
You should already have a Quarto website (or at least the bones of one) that:
:::

::: {.body-text}
- is deployed using GitHub Pages **and**

- contains *some* content (e.g. text, headings, etc.) for us to customize
:::

```{r}
#| eval: true 
#| echo: false
#| fig-align: "center"
#| out-width: "85%" 
#| fig-alt: "Two penguins looking happily up at a Quarto logo 'meteor' that is flying overhead."
knitr::include_graphics("images/penguins_meteor.png")
```

::: {.body-text-s .gray-text .center-text}
Art by [Allison Horst](https://github.com/allisonhorst/stats-illustrations)
:::

<br>

::: {.footer}
**If you first need to get your website up and running, follow along with these [step-by-step instructions](https://ucsb-meds.github.io/creating-quarto-websites/) before moving forward.**
:::

---

## {#tldr1 data-menu-title="TL;DR"}

[TL;DR]{.slide-title}

<hr>

When we render a new Quarto site, it converts all of our markdown into HTML and applies a pre-built CSS stylesheet (the Bootswatch [Cosmo theme](https://bootswatch.com/cosmo/)). We can modify the appearance of our website in a number of ways. We'll learn a bit about the following:

<br>

::: {.incremental}
::: {.body-text-s}
- [**Editing the `index.qmd` YAML**]{.teal-text} -- you can apply a [pre-built template](https://quarto.org/docs/websites/website-about.html#templates) to give your landing page a sleek and professional appearance (we can further modify this later with some CSS).

- [**Editing the `_quarto.yml` file**]{.teal-text} -- this is our website configuration file,  where we can easily update our website's navigation (e.g. add new pages), add a page footer, a [favicon](https://en.wikipedia.org/wiki/Favicon), and much more. We can also switch the default theme to a different pre-built [Bootswatch theme](https://bootswatch.com/) (by replacing `cosmo` with an alternative theme name).

- [**Defining CSS rules in the `styles.css` file**]{.teal-text} that comes with every new Quarto site. This allows you to fine-tune the appearance of your site.

- [**Creating a `.scss` file(s)**]{.teal-text} that contains [Sass](https://sass-lang.com/) variables to quickly customize your website's theme -- these take the form of `$var-name: value;` and you can find a list of them in the [Quarto documentation](https://quarto.org/docs/output-formats/html-themes.html#sass-variables).

:::
:::

<br>

. . . 

::: {.body-text-xl .teal-text .center-text}
Or...
:::

---

## {#tldr2 data-menu-title="TL;DR"}

[TL;DR]{.slide-title}

<hr>

<br>

::: {.body-text-xl .teal-text .center-text .bottombr}
Combine all of the above!
:::

::: {.body-text-l .center-text}
Approaching this in the following order worked best for me:
:::

. . .

::: incremental
- [**First**]{.teal-text}, add a [pre-built template](https://quarto.org/docs/websites/website-about.html#templates) to `index.qmd` and adjust website configurations by editing `_quarto.yml` -- this is the easiest way to add some really cool features with minimal effort.

- [**Next**]{.teal-text}, create a `styles.scss` file (name it however you want), link to it in `_quarto.yml` (this applies your styles to your Quarto site), and define your Sass variables.

- [**Finally**]{.teal-text}, make fine-tuned adjustments by defining CSS rules directly in your `styles.scss` file (you can write CSS in `.scss` files, but not Sass in `.css` files).
:::

---

## {#branches data-menu-title="Use branches!"}

[{{< fa code-branch >}} Working on branches is recommended!]{.slide-title2}

<hr>

::: {.body-text-m .center-text}
*I almost always work on a branch when making changes to my website -- this way I can safely test changes before deploying them to my live site.*
:::

::: {.body-text-s}
To create a branch, first ensure that you're on `main` by typing either `git branch` or `git status` into the RStudio Terminal (either will tell you which branch you're currently on). If you're not on `main`, you can switch by running `git checkout main`.
:::

::: {.body-text-s}
Create a local git branch from `main` by running the following in your Terminal:
:::

```{bash filename="Command line / RStudio Terminal"}
#| eval: false
#| echo: true
#| code-line-numbers: false
git checkout -b my-new-branch
```

::: {.body-text-s}
Push your new local branch to GitHub by running the following in your terminal:
:::

```{bash filename="Command line / RStudio Terminal"}
#| eval: false
#| echo: true
#| code-line-numbers: false
git push -u origin my-new-branch
```

::: {.body-text-s .topbr}
You're now ready to work as normal! Once satisfied with your changes, you can `git add`, `git commit -m "my commit message"`, and `git push` (or use the RStudio GUI buttons in the **Git** tab) your files. Open a [pull request](https://docs.github.com/en/pull-requests/collaborating-with-pull-requests/proposing-changes-to-your-work-with-pull-requests/about-pull-requests) from GitHub and [merge](https://docs.github.com/en/pull-requests/collaborating-with-pull-requests/incorporating-changes-from-a-pull-request/merging-a-pull-request) into `main` to integrate your changes.
:::

---

## {#quarto-preview data-menu-title="quarto preview"}

[Preview your site for fast iteration]{.slide-title}

<hr>

Run `quarto preview` in the RStudio Terminal to view changes in near real time â€“ each time edit and save your work, the preview will update in your browser.

<br>

```{r}
#| eval: true
#| echo: false
#| out-width: "100%"
#| fig-align: "center"
knitr::include_graphics("images/quarto-preview.gif")
```


---

##  {#lets-start-styling data-menu-title="Let's start styling" background="#053660"}

<div class="page-center">
<div class="custom-subtitle">{{< fa palette title="a painter's palette" >}} Let's start styling</div>
</div>

---

## {#so-youve-created-a-website data-menu-title="So you've created a Quarto website..."}

[So you've created your personal website using Quarto . . .]{.slide-title}

<hr>

::: {.column width="50%"}
::: {.body-text}
<br>
<br>
[Quarto](https://quarto.org/) gives us an easy-to-use web publishing format to create our personal websites -- we can develop in a space that is comfortable (for me, that's RStudio) and write mostly Markdown syntax (which is rendered as HTML when we build our website). A massive benefit is that these websites already look pretty slick right out of the box.
:::
:::

::: {.column width="50%"}

```{r}
#| eval: true 
#| echo: false
#| fig-align: "center"
#| out-width: "85%" 
knitr::include_graphics("images/trestles-template.png")
```

::: {.body-text-s .gray-text .center-text}
An example Quarto website styled using the built-in [Bootswatch](https://bootswatch.com/) theme, [Cosmo](https://bootswatch.com/cosmo/), *and* the `trestles` [layout template](https://quarto.org/docs/websites/website-about.html) applied
:::

:::

::: {.center-text}
[**Please note:** these materials assume you've already worked through [Creating your personal website with Quarto](https://ucsb-meds.github.io/creating-quarto-websites/) and picks up where those instructions left off.]{.teal-text}
:::

---

## {#modify-to-stand-out data-menu-title="Make your website stand stand out"}

[But some additional modifications can make *your* website stand out from the rest]{.slide-title3}

<hr>

```{r}
#| echo: false
#| fig-width: 5
#| fig-height: 3
#| fig-align: center
#| fig-alt: "Alecia Keys, a judge on the TV show, The Voice, excited slams her hands down and stands up saying, 'There is nobody like you!'" 
knitr::include_graphics("images/unique.gif")
```



