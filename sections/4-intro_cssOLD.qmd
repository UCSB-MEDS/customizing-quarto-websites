---
format: revealjs
---

##  {#light-intro-css data-menu-title="Light intro to CSS" background="#053660"}

<div class="page-center">
<div class="custom-subtitle">A light introduction to CSS `r fontawesome::fa("css3-alt", fill = "#d2e3f3", a11y = "sem")`</div>
</div>

---

##  {#css-rules data-menu-title="CSS rules"}

<div class="slide-title">CSS is a rule-based language</div>

<div class="body-text topbr">CSS is a rule-based language, meaning that it allows you to define groups of styles that should be applied to particular elements or groups of elements on a web page. For example, *"I want all first-level (`<h1>`) headings to be green text with a bit of extra space between each letter"* could be coded as:</div>

:::: {.columns}
::: {.column width="50%"}
<center><img src="images/CSS_syntax.png" width="700"/></center>
:::
::: {.column width="50%"}
<div class="caption-text">`r fontawesome::fa("angle-right", fill = "#05859B", a11y = "sem")` **Selectors** select the HTML element(s) you want to style *(e.g. first-level headings, `<h1>`)*</div>

<div class="caption-text topbr">`r fontawesome::fa("angle-right", fill = "#05859B", a11y = "sem")` **Declarations** sit inside curly brackets, `{}`, and are made up of **property** and **value** pairs. Each pair specifies the property of the HTML element(s) you're selecting *(e.g. the color property of the element `<h1>`)*, and a value you'd like to assign to that property *(e.g. green)*</div>

<div class="caption-text topbr">`r fontawesome::fa("angle-right", fill = "#05859B", a11y = "sem")` A property and its corresponding value are separated by a colon, `:`. Delcaration end with a semicolon, `;`</div>
:::
::::

---

##  {#select-tags data-menu-title="element & grouping selectors"}

<div class="slide-title">Select an element(s) based on its tag</div>

::: {.panel-tabset}

## Element Selectors

<div class="body-text">Any HTML element can be used as a selector. The declarations specified apply to all HTML elements of that type.</div>

<div class="body-text topbr">**CSS**</div>
```{css}
#| eval: false
#| echo: true
h1 {
  color: green;
  letter-spacing: 5px;
}
```

<div class="body-text topbr">**HTML**</div>
```{html}
#| eval: false
#| echo: true
<h1>My level one header will be styled</h1>
<h2>This level two header will not be styled</h2>
<p>Neither will this paragaph</p>
<h1>But this second level one header will be</h1>
```

:::: {.columns}
::: {.column width="40%"}
<br>
<div class="large-body-text">Result `r fontawesome::fa("arrow-right", fill = "#05859B", a11y = "sem")`</div>
:::
::: {.column width="60%"}
<center><img src="images/element_selector.png" width="500"/></center>
:::
::::

## Grouping Selectors

<div class="body-text">Rather than defining separate rules for multiple element selectors that you want styled the same way, you can group them together. Simply separate each selector by a comma.</div>

<div class="body-text topbr">**CSS**</div>
```{css}
#| eval: false
#| echo: true
h1, h2, p {
  text-align: center;
  color: purple;
}
```

<div class="body-text topbr">**HTML**</div>
```{html}
#| eval: false
#| echo: true
<h1>My level one header will be styled</h1>
<h2>This level two header will be styled</h2>
<h3>This level three header will not be styled</h3>
<p>This paragaph will be styled</p>
```

:::: {.columns}
::: {.column width="40%"}
<br>
<div class="large-body-text">Result `r fontawesome::fa("arrow-right", fill = "#05859B", a11y = "sem")`</div>
:::
::: {.column width="60%"}
<center><img src="images/grouping_selector.png" width="600"/></center>
:::
::::
:::

---

##  {#select-attributes data-menu-title="id & class selectors"}

<div class="slide-title">Select an element(s) using attributes</div>

::: {.panel-tabset}
## ID Selectors

<div class="body-text">An ID selector uses the *id attribute* of an HTML element to style that specific element. IDs must be unique within a page and therefore can only be used to select and style *one* unique element. ID selectors are written using a pound symbol followed by the selector name, e.g. `#selector`.</div>

<div class="body-text topbr">**CSS**</div>
```{css}
#| eval: false
#| echo: true
#para1 {
  color: red;
  text-align: center;
}
```

<div class="body-text topbr">**HTML**</div>
```{html}
#| eval: false
#| echo: true
<p id="para1">My first paragraph is styled</p>
<p>But my second paragraph is not</p>
```

:::: {.columns}
::: {.column width="40%"}
<br>
<div class="large-body-text">Result `r fontawesome::fa("arrow-right", fill = "#05859B", a11y = "sem")`</div>
:::
::: {.column width="60%"}
<center><img src="images/id_selector.png" width="600"/></center>
:::
::::

## Class Selectors

<div class="body-text">An class selector uses the *class attribute* of an HTML element to style that specific element. Class selectors are written using a period followed by the selector name, e.g. `.selector`. HTML elements can have more than one class, e.g. `<p class="class1 class2">`</div>

<div class="body-text topbr">**CSS**</div>
```{css}
#| eval: false
#| echo: true
.blue-italicized {
  color: blue;
  font-style: italic;
}
```

<div class="body-text topbr">**HTML**</div>
```{html}
#| eval: false
#| echo: true
<p class="blue-italicized">My first paragraph is styled</p>
<p>But my second paragraph is not</p>
```

:::: {.columns}
::: {.column width="40%"}
<br>
<div class="large-body-text">Result `r fontawesome::fa("arrow-right", fill = "#05859B", a11y = "sem")`</div>
:::
::: {.column width="60%"}
<center><img src="images/class_selector.png" width="500"/></center>
:::
::::
::::
:::

---

##  {#universal-inline data-menu-title="universal & inline selectors"}

<div class="slide-title">Select an all elements or style inline</div>

::: {.panel-tabset}
## Universal Selector

<div class="body-text">The universal selector selects *all* HTML elements on the page. It is written using only an asterisk.</div>

<div class="body-text topbr">**CSS**</div>
```{css}
#| eval: false
#| echo: true
* {
  text-align: center;
  color: orange;
}
```

<div class="body-text topbr">**HTML**</div>
```{html}
#| eval: false
#| echo: true
<h1>My level one header will be styled</h1>
<h2>This level two header will be styled</h2>
<p>This paragaph will also be styled</p>
```

:::: {.columns}
::: {.column width="40%"}
<br>
<div class="large-body-text">Result `r fontawesome::fa("arrow-right", fill = "#05859B", a11y = "sem")`</div>
:::
::: {.column width="60%"}
<center><img src="images/universal_selector.png" width="600"/></center>
:::
::::

## Inline styling

<div class="body-text">The *style attribute* may be used inline to apply unique styles to a single element. It's best practice to use these sparingly as it mixes content (HTML) with presentation (CSS) and cannot be reused with other elements like defined CSS rules can.</div>

<div class="body-text topbr">**HTML with inline styling**</div>
```{html}
#| eval: false
#| echo: true
<p>This is a normal paragraph</p>
<p style="color: red; font-style: italic;">This paragraph has inline styling</p>
<p>Here, only the word <span style="color: red; font-style: italic;">paragraph</span> is styled</p>
```

:::: {.columns}
::: {.column width="40%"}
<br>
<div class="large-body-text">Result `r fontawesome::fa("arrow-right", fill = "#05859B", a11y = "sem")`</div>
:::
::: {.column width="60%"}
<center><img src="images/inline_styling.png" width="400"/></center>
:::
::::
:::

---

##  {#practice1 data-menu-title="Practice HTML & CSS (1/n)"}

<div class="slide-title">Exercise: practice writing HTML & styling it using CSS (1/n)</div>

<div class="caption-text topbr">You can use any text editor to do so (RStudio an VS Code work too!). The following steps assume you're working in RStudio. Here, we'll link an external (separate) CSS style sheet within our HTML file, though you can also have the option of writing an internal style sheet (read more about the pros/cons and how to do so [here](https://www.w3schools.com/css/css_howto.asp)).</div>

<div class="caption-text topbr">1. Open an RProject (an existing one is fine). In your terminal window, use the `touch` command to create two files in the same directory (for simplicity, I did this in my project's root directory): `practice-html.html` and `practice-styles.css`.</div>  

<div class="caption-text">2. Create the skeleton of your HTML file and link to your CSS file.</div>

```{html}
#| eval: false
#| echo: true
<!DOCTYPE html> <!-- All HTML docs start with a doc type declaration-->
<html> <!-- This tag represents the root of the HTML doc -->
<head>
<link rel="stylesheet" href="practice-styles.css"> <!-- External style sheets are defined within the <link> element inside the <head> section of an HTML page -->
</head>
<body> <!-- This tag contains all the contents of the HTML doc -->
</body>
</html>
```

---

##  {#practice2 data-menu-title="Practice HTML & CSS (2/n)"}

<div class="slide-title">Exercise: practice writing HTML & styling it using CSS (2/n)</div>

<div class="caption-text topbr">Write some HTML! Create a level one header, a paragraph. and a button that takes you to the MEDS website ([here's one good resource](https://www.w3docs.com/snippets/html/how-to-create-an-html-button-that-acts-like-a-link.html) on how to do that.</div>

## {auto-animate="true"}

```{html}
#| eval: false
#| echo: true
<!DOCTYPE html> <!-- All HTML docs start with a doc type declaration-->
<html> <!-- This tag represents the root of the HTML doc -->
<head>
<link rel="stylesheet" href="practice-styles.css"> <!-- External style sheets are defined within the <link> element inside the <head> section of an HTML page -->
</head>
<body> <!-- This tag contains all the contents of the HTML doc -->
<!-- Write your HTML here -->
</body>
</html>
```

## {auto-animate=true}

```{html}
#| eval: false
#| echo: true
<!DOCTYPE html> <!-- All HTML docs start with a doc type declaration-->
<html> <!-- This tag represents the root of the HTML doc -->
<head>
<link rel="stylesheet" href="practice-styles.css"> <!-- External style sheets are defined within the <link> element inside the <head> section of an HTML page -->
</head>
<body> <!-- This tag contains all the contents of the HTML doc -->
<!-- Write your HTML here -->
<h1>Here is my level one header</h1>
<p>Here is my paragraph</p>
<button type="button" onclick=window.location.href='https://ucsb-meds.github.io'>Go to MEDS website</button>
</body>
</html>
```

<div class="caption-text"><span style="color: #868A8F;">Check out all HTML tags [here](https://www.w3schools.com/tags/default.asp).</span></div>

---

Let's use an element selector to change the color and style of `<>`. Check out all CSS properties [here](https://www.w3schools.com/cssref/).</div>


