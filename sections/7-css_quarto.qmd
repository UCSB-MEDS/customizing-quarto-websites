---
format: revealjs
---

##  {#css-quarto data-menu-title="CSS + Quarto" background="#053660"}

<div class="page-center">
<div class="custom-subtitle">`r fontawesome::fa("question", fill = "#d2e3f3", a11y = "sem")` Okay, that's cool...but what about Quarto?</div>
</div>

---

##  {#styles.css data-menu-title="Quarto comes with `styles.css`"}

[A `styles.css` file is automatically generated when you create a new Quarto site]{.slide-title-smallest}

<hr>

:::: {.columns}
::: {.column width="50%"}
<br>

```{r}
#| eval: true 
#| echo: false
#| fig-align: "center"
#| out-width: "100%" 
knitr::include_graphics("images/quarto_files.png")
```

:::
::: {.column width="50%"}
<br>

::: {.body-text}
**We can write our CSS rules in `styles.css`, *but alternatively*, we can write them directly in our `styles.scss` file** *(remember, you can write CSS in a `.scss` file but you can't write Sass in a `.css` file)*. 
:::

::: {.body-text}
You can delete `styles.css` if you don't plan to use it, or leave it be (it's easy to create a new one using the `touch` command in your terminal).
:::
:::
::::

---

##  {#scss-div data-menu-title="SCSS rules divider"}

[Create a section for defining CSS rules in `styles.scss`]{.slide-title}

<hr>

::: {.body-text .topbr}
To start defining CSS rules in `styles.scss` you first need to add the `/*-- scss:rules --*/` region decorator beneath your Sass variables section:
:::

```{css}
#| eval: false
#| echo: true
#| code-line-numbers: "11"

/*-- scss:defaults --*/

// Fonts
@import url('https://fonts.googleapis.com/css2?family=Nunito:wght@400;800&display=swap');

// Colors
$dark-green: #98A08D;

// additional Sass variables omitted for brevity ~

/*-- scss:rules --*/
```

::: {.body-text .topbr}
Next, we'll walk through some examples of how to modify your site with your own CSS rules.
:::

---

##  {#determine-element-to-style data-menu-title="Determine element(s) to style"}

[Determine which element you want to style]{.slide-title-smallest}

<hr>

::: {.body-text .topbr}
Let's say I want to similarly style (add spacing between each letter, increase the font weight, make a dark gray color) the following text on my website:
:::

:::: {.columns}

::: {.column width="33%"}

```{r}
#| eval: true 
#| echo: false
#| fig-align: "center"
#| out-width: "100%" 
knitr::include_graphics("images/index-font.png")
```

::: {.caption-text .center-text .gray-text .topbr}
On my landing page, I want to style my name, "Samantha Csik", and the three section headers, "Hi there!", "Education", and "Experience"
:::

:::

::: {.column width="33%"}

```{r}
#| eval: true 
#| echo: false
#| fig-align: "center"
#| out-width: "100%" 
knitr::include_graphics("images/about-font.png")
```

::: {.caption-text .center-text .gray-text .topbr}
On my About page, I want to style the page title, "About"
:::

:::

::: {.column width="33%"}

```{r}
#| eval: true 
#| echo: false
#| fig-align: "center"
#| out-width: "100%" 
knitr::include_graphics("images/resources-font.png")
```

::: {.caption-text .center-text .gray-text .topbr}
On my Resources page, I want to style the page title, "All of my favorite resources!"
:::

:::

::::

---

##  {#dont-know-element data-menu-title="Don't know element?"}

[But what if I don't know what HTML element type this is? Inspect!]{.slide-title-smallest}

<hr>

:::: {.columns}
::: {.column width="50%"}
<br>

```{r}
#| eval: true 
#| echo: false
#| fig-align: "center"
#| out-width: "100%" 
knitr::include_graphics("images/inspect.gif")
```

:::
::: {.column width="50%"}
<br>

::: {.caption-text .topbr}
Using the **Inspect** tool is a great way to get a better sense of how CSS is used to modify particular HTML elements (this works with any web page, and *also* your locally hosted website preview).
:::

::: {.caption-text .topbr}
In your website preview, **right click on an element of interest** (in this case, let's start with my name, "Samantha Csik") and **choose Inspect** to pull up the underlying HTML & CSS files.
:::

::: {.caption-text .topbr}
Hovering your mouse over different lines of HTML highlights the corresponding element on your webpage.
:::
:::
::::

---

##  {#inspect-name data-menu-title="Inspect landing page name"}

::: {.large-body-text .center-text}
My name is an `<h1>` element
:::

```{r}
#| eval: true 
#| echo: false
#| fig-align: "center"
#| out-width: "100%" 
knitr::include_graphics("images/inspect-name.png")
```

::: {.caption-text .gray-text .center-text}
**Note:** This `<h1>` element also has a class `title` -- more on that in a minute.
:::

---

##  {#inspect-landing-page-sections data-menu-title="Inspect landing page sections"}

::: {.large-body-text .center-text}
My landing page sections, "Hi there!", "Education" and "Experience", are `<h2>` elements
:::

```{r}
#| eval: true 
#| echo: false
#| fig-align: "center"
#| out-width: "100%" 
knitr::include_graphics("images/inspect-education.png")
```

---

##  {#inspect-about data-menu-title="Inspect about page"}

::: {.large-body-text .center-text}
My About page and Resource page titles are `<h1>` elements
:::

```{r}
#| eval: true 
#| echo: false
#| fig-align: "center"
#| out-width: "90%" 
knitr::include_graphics("images/inspect-about.png")
```

::: {.caption-text .gray-text .center-text}
**Note:** These `<h1>` elements also have a class, `title`-- we'll come back to that shortly.
:::
---

##  {#write-grouping-selector data-menu-title="Write a CSS grouping selector"}

[Write a CSS grouping selector to style `<h1>` and `<h2>` elements]{.slide-title-smallest}

<hr>

::: {.panel-tabset}

## `styles.scss`

::: {.body-text .topbr .bottombr}
Here, we have a grouping selector that targets *all* `<h1>` and `<h2>` elements -- it increases both the spacing between each letter and it colors those text elements dark green.
:::

```{css filename="styles.scss"}
#| eval: false
#| echo: true
#| code-line-numbers: "10-14"
/*-- scss:defaults --*/

// Colors
$dark-green: #858E79;

// other variables omitted for brevity ~

/*-- scss:rules --*/

h1, h2 {
  letter-spacing: 5px;
  color: $dark-green;
}
```

## Output

:::: {.columns}
::: {.column width="50%"}

```{r}
#| eval: true 
#| echo: false
#| fig-align: "center"
#| out-width: "100%" 
knitr::include_graphics("images/without-header-styling.png")
```

::: {.caption-text .gray-text .center-text .topbr}
No CSS styling on `h1` and `h2` headers
:::
:::
::: {.column width="50%"}

```{r}
#| eval: true 
#| echo: false
#| fig-align: "center"
#| out-width: "100%" 
knitr::include_graphics("images/with-header-styling.png")
```

::: {.caption-text .gray-text .center-text .topbr}
With CSS styling on `h1` and `h2` headers
:::
:::
::::

## Notes

::: {.body-text}
**{{< fa angle-right >}}** I don't need to make any changes to the HTML (in `index.qmd`, `about.qmd`, and `resources.qmd` since this grouping selector targets *all* `<h1>` and `<h2>` elements across my site. If an element on any of my pages has either of those tags, it will get styled according to the declarations included in our CSS rule.
:::

:::

---

##  {#title-class data-menu-title="'title' class"}

[We can modify existing class (or ID) selectors]{.slide-title-smallest}

<hr>

::: {.caption-text .topbr}
Earlier, we noted that the page titles ("Samantha Csik" on the landing page, "About" on the About page and "All my favorite resources!" on the Resources page), are all `<h1>` elements *and* also are given the class, `title` (e.g. `<h1> class="title">All of my favorite resources!</h1>`).
:::

::: {.caption-text .topbr}
The Quarto framework has already defined a class selector called `.title` and applied that class to the above elements. We can modify it however we'd like. For example, let's color any text elements that are assigned the class `.title`  red:
:::

::: {.panel-tabset}

## `styles.scss`
```{css filename="styles.scss"}
#| eval: false
#| echo: true
#| code-line-numbers: "15-17"
/*-- scss:defaults --*/

// Colors
$dark-green: #858E79;

// other variables omitted for brevity ~

/*-- scss:rules --*/

h1, h2 {
  letter-spacing: 5px;
  color: $dark-green;
}

.title {
  color: red;
}
```

## Output

:::: {.columns}
::: {.column width="33%"}

```{r}
#| eval: true 
#| echo: false
#| fig-align: "center"
#| out-width: "100%" 
knitr::include_graphics("images/red-name.png")
```

:::
::: {.column width="33%"}

```{r}
#| eval: true 
#| echo: false
#| fig-align: "center"
#| out-width: "100%" 
knitr::include_graphics("images/red-about.png")
```

:::
::: {.column width="33%"}

```{r}
#| eval: true 
#| echo: false
#| fig-align: "center"
#| out-width: "100%" 
knitr::include_graphics("images/red-resources.png")
```

:::
::::

## Notes

[**{{< fa angle-right >}}** In this case, I don't need to make any changes to the HTML (in `index.qmd`, `about.qmd`, and `resources.qmd`) since those `<h1>` elements are *already* assigned the class, `title`.]{.body-text}

:::

---

##  {#title-class2 data-menu-title="Elements w/o title class"}

[What about `<h1>` elements that are *not* assigned the `title` class?]{.slide-title-smallest}

<hr>

::: {.body-text .topbr}
Let's write a couple of other elements that *are not* assigned the `title` class to see what happens. I'll do this on my *About* page:
:::

::: {.panel-tabset}

## `about.qmd`

```{r filename="about.qmd"}
#| eval: false
#| echo: true
#| code-line-numbers: "5-11"
---
title: "About"
---

<h1>this is an `<h1>` element</h1> # alternatively, you can write <h1> elements using markdown (`# this is an `<h1>` element`)

<h1 class="title">this is an `<h1>` element of class `title`</h1>

<p>this is a `<p>` element</p>

<p class="title">this is a `<p>` element of class `title`</p>
```

## Output

```{r}
#| eval: true 
#| echo: false
#| fig-align: "center"
#| out-width: "60%" 
knitr::include_graphics("images/h1-title.png")
```

## Notes

::: {.caption-text .topbr}
**{{< fa angle-right >}}** Class selectors allow us to customize exactly how CSS rules apply to particular elements. In this example, only `<h1>` elements that are assigned the class, `title`, are colored red. Any `<h1>` elements that are not assigned the class, `title`, are styled according to our `h1, h2 {}` element selector.
:::

::: {.caption-text .topbr}
**{{< fa angle-right >}}** We can apply the `title` class to any text element. In this example, we apply it both to an `<h1>` element and a `<p>` element.
:::

:::

---

##  {#write-own-class-selector data-menu-title="Write your own class selectors"}

[We can write and apply our own class selectors]{.slide-title-smallest}

<hr>

::: {.panel-tabset}

## `styles.scss`

::: {.smaller-body-text .bottombr}
Let's first create two different classes: one to center text on the page, and another to color text orange. Then, we'll add elements to our **Resources** page to test out our new class selectors:
:::

```{css filename="styles.scss"}
#| eval: false
#| echo: true
#| code-line-numbers: "20-26"
/*-- scss:defaults --*/

// Colors
$dark-green: #858E79;
$orange: #ad7237;

// other variables omitted for brevity ~

/*-- scss:rules --*/

h1, h2 {
  letter-spacing: 5px;
  color: $dark-green;
}

.title {
  color: red;
}

.center-text {
  text-align: center;
}

.orange-text {
  color: $orange;
}
```

## `resources.qmd`

::: {.body-text .bottombr}
Here, I'm creating three paragraphs -- **(1)** a paragraph that is assigned just the `.orange-text` class, **(2)** a paragraph that is assigned just the `.center-text` class, and **(3)** a paragraph has no classes.
:::

::: {.body-text .bottombr}
What happens if you create your custom subtitle using an `<h1>` tag instead of `<p>`? Why do you think this happens?
:::

```{r filename="resources.qmd"}
#| eval: false
#| echo: true
#| code-line-numbers: "5-9"

---
title: "All my favorite resources!"
---

<p class="orange-text">This paragraph is orange.</p>
  
<p class="center-text">This paragraph is centered.</p>
  
<p>This paragraph has no styling.</p>
```

## Output

```{r}
#| eval: true 
#| echo: false
#| fig-align: "center"
#| out-width: "60%" 
knitr::include_graphics("images/custom-classes.png")
```

## Notes

[**{{< fa angle-right >}}** Class selectors take the form `.selector-name {}`]{.body-text .topbr}

[**{{< fa angle-right >}}** Unlike element selectors, class selectors must be applied to the elements that we want to style, e.g. `<h1 class="selector-name">Content</h1>`]{.body-text .topbr}


:::

---

##  {#apply-two-class-selectors data-menu-title="Apply two class selectors"}

[Elements can have more than one class selector]{.slide-title-smallest}

<hr>

::: {.panel-tabset}

## `styles.scss`

::: {.body-text}
Using the same element selectors as in our previous example:
:::

```{css filename="styles.scss"}
#| eval: false
#| echo: true
/*-- scss:defaults --*/

// Colors
$dark-green: #858E79;
$orange: #ad7237;

// other variables omitted for brevity ~

/*-- scss:rules --*/

h1, h2 {
  letter-spacing: 5px;
  color: $dark-green;
}

.title {
  color: red;
}

.center-text {
  text-align: center;
}

.orange-text {
  color: $orange;
}
```

## `resources.qmd`

::: {.body-text .bottombr}
Let's add a couple more paragraphs to try out using more than one class selector on a particular element:
:::

```{r filename="resources.qmd"}
#| eval: false
#| echo: true
#| code-line-numbers: "11-13"

---
title: "All my favorite resources!"
---

<p class="orange-text">This paragraph is orange.</p>
  
<p class="center-text">This paragraph is centered.</p>
  
<p>This paragraph has no styling.</p>
  
<p class="center-text orange-text">This paragraph is centered and orange.</p>
  
<p class="orange-text">**This paragraph is orange and bolded using markdown syntax, though you can also write and apply a selector to bold text.**</p>
```

## Output

```{r}
#| eval: true 
#| echo: false
#| fig-align: "center"
#| out-width: "60%" 
knitr::include_graphics("images/two-classes.png")
```

## Notes

::: {.body-text .topbr}
**{{< fa angle-right >}}** HTML elements can have more than one class, e.g. `<p class="class1 class2 class3 etc">`
:::

:::

---

##  {#quarto-syntax data-menu-title="Quarto Syntax"}

[Quarto also provides its [own syntax](https://quarto.org/docs/authoring/markdown-basics.html#divs-and-spans) for applying classes to elements]{.slide-title-smallest}

<hr>

::: {.body-text .bottombr}
You can create both **divs (block-level regions of content)** and **spans (inline content)** using Quarto's syntax. For example:
:::

:::: {.columns}

::: {.column width="50%"}
::: {.body-text .center-text}
**Divs**
:::

```{.md}
# Quarto syntax
::: {.my-selector}
Some element (e.g. text) to style
:::
  
# HTML syntax
<div class="my-selector">
  Some element (e.g. text) to style
</div>
```
:::

::: {.column width="50%"}
::: {.body-text .center-text}
**Spans**
:::

```{.md}
# Quarto syntax
Some text with just [this section]{.my-selector} styled

# HTML syntax
<p>Some text with just <span class="my-selector">this section</span> styled</p>
```
:::

::::

---

##  {#mix-match data-menu-title="Mix & match styles"}

[You can mix and match syntaxes in `.qmd` files]{.slide-title}

<hr>

::: {.body-text .bottombr}
I tend to use a mix of both approaches (HTML & Quarto syntax). For example:
:::

::: {.panel-tabset}

## `resources.qmd`

```{md filename="resources.qmd"}
#| eval: false
#| echo: true

---
title: "All my favorite resources!"
---

<p class="orange-text">Here is some orange text.</p>

<p>And here is some normal text beneath it.</p>

[Here is more orange text written using Quarto's syntax]{.orange-text}

Also note that I do not need to wrap this text in the `<p>` tag in order for it to render as normal text. `.qmd` files allow us to seamlessly blend markdown syntax with HTML.
```

## Output

```{r}
#| eval: true 
#| echo: false
#| fig-align: "center"
#| out-width: "60%" 
knitr::include_graphics("images/quarto-css-syntax.png")
```

## Notes

::: {.caption-text}
**{{< fa angle-right >}}** You'll notice the `[]{}` and `::: {} :::` syntax throughout Quarto's documentation, and also if you explore the source code of other Quarto websites/presentations/etc. You don't *need* to use it, but it helps to know what it is when you see it!
:::

:::

