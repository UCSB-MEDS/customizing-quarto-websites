---
format: 
  revealjs:
    slide-number: true
    # preview-links: true
    code-link: true
    highlight-style: a11y
    chalkboard: true
    # self-contained: true
    # scrollable: true
    theme: 
      - meds-slides-styles.scss
---

##  {#css-quarto data-menu-title="CSS + Quarto" background="#047C90"}

<div class="page-center">
<div class="custom-subtitle">Okay, that's cool...but what about Quarto?</div>
</div>

---

##  {#styles.css data-menu-title="Quarto comes with `styles.css`"}

[A `styles.css` file is automatically generated when you create a new Quarto site]{.slide-title3}

<hr>

**We can write our CSS rules in `styles.css`, *but alternatively*, we can write them directly in our `styles.scss` file** *(remember, you can write CSS in a `.scss` file but you can't write Sass in a `.css` file)*. 

<br>

```{r}
#| eval: true 
#| echo: false
#| fig-align: "center"
#| out-width: "100%" 
knitr::include_graphics("images/quarto_files.png")
```

<br>

You can delete `styles.css` if you don't plan to use it, or leave it be (it won't impact your Quarto site since it's not linked as our stylesheet in `_quarto.yml`).

---

##  {#scss-div data-menu-title="SCSS rules divider"}

[Create a section for defining CSS rules in `styles.scss`]{.slide-title}

<hr>

To start defining CSS rules in `styles.scss` you first need to add the `/*-- scss:rules --*/` region decorator beneath your Sass variables section (**this is important! your CSS won't be recognized without this region decorator in place**):

```{sass filename="styles.scss"}
#| eval: false
#| echo: true
#| code-line-numbers: "11"

/*-- scss:defaults --*/

// Import fonts
@import url('https://fonts.googleapis.com/css2?family=Nunito:ital,wght@0,200..1000;1,200..1000&family=Sen:wght@400..800&display=swap');

// Colors
$dark-green: #858E79;

// additional Sass variables omitted for brevity ~

/*-- scss:rules --*/
```

<br>

Next, we'll walk through some examples of how to modify your site with your own CSS rules.

---

##  {#determine-element-to-style data-menu-title="Determine element(s) to style"}

[Determine which element(s) you want to style]{.slide-title2}

<hr>

<br>

Let's say I want to similarly style (add a bit of spacing between each letter, increase font weight) the following text on my website:

<br>

:::: {.columns}

::: {.column width="33%"}

```{r}
#| eval: true 
#| echo: false
#| fig-align: "center"
#| out-width: "100%" 
knitr::include_graphics("images/index-font.png")
```

::: {.body-text-s .center-text .gray-text}
On my landing page, I want to style my name, "Samantha Csik", and the three section headers, "Hi there!", "Education", and "Experience"
:::

:::

::: {.column width="33%"}

```{r}
#| eval: true 
#| echo: false
#| fig-align: "center"
#| out-width: "100%" 
knitr::include_graphics("images/about-font.png")
```

::: {.body-text-s .center-text .gray-text}
On my About page, I want to style the page title, "About"
:::

:::

::: {.column width="33%"}

```{r}
#| eval: true 
#| echo: false
#| fig-align: "center"
#| out-width: "100%" 
knitr::include_graphics("images/resources-font.png")
```

::: {.body-text-s .center-text .gray-text}
On my Resources page, I want to style the page title, "All of my favorite resources!"
:::

:::

::::

---

##  {#dont-know-element data-menu-title="Don't know element?"}

[But what if I don't know what HTML element type this is? Inspect!]{.slide-title2}

<hr>

Using the **Inspect** tool is a great way to get a better sense of how CSS is used to modify particular HTML elements (this works with any web page, and *also* your locally hosted website preview).

:::: {.columns}
::: {.column width="50%"}
<br>

```{r}
#| eval: true 
#| echo: false
#| fig-align: "center"
#| out-width: "100%" 
knitr::include_graphics("images/inspect.gif")
```

:::
::: {.column width="50%"}
<br>
<br>
<br>

::: {.body-text-s}
In your website preview, **right click on an element of interest** (in this case, let's start with my name, "Samantha Csik") and **choose Inspect** to pull up the underlying HTML & CSS files.
:::

::: {.body-text-s}
Hovering your mouse over different lines of HTML highlights the corresponding element on your webpage.
:::
:::
::::

---

##  {#inspect-name data-menu-title="Inspect landing page name"}

::: {.body-text-xl .teal-text .center-text}
My name is an `<h1>` element
:::

```{r}
#| eval: true 
#| echo: false
#| fig-align: "center"
#| out-width: "100%" 
knitr::include_graphics("images/inspect-name.png")
```

::: {.body-text-s .gray-text .center-text}
**Note:** This `<h1>` element also has a class `title` -- more on that in a minute.
:::

---

##  {#inspect-landing-page-sections data-menu-title="Inspect landing page sections"}

::: {.body-text-xl .teal-text .center-text}
My landing page sections, "Hi there!", "Education" and "Experience", are `<h2>` elements
:::

```{r}
#| eval: true 
#| echo: false
#| fig-align: "center"
#| out-width: "100%" 
knitr::include_graphics("images/inspect-education.png")
```

---

##  {#inspect-about data-menu-title="Inspect about page"}

::: {.body-text-xl .teal-text .center-text}
My About page and Resource page titles are `<h1>` elements
:::

```{r}
#| eval: true 
#| echo: false
#| fig-align: "center"
#| out-width: "90%" 
knitr::include_graphics("images/inspect-about.png")
```

::: {.body-text-s .gray-text .center-text}
**Note:** These `<h1>` elements also have a class, `title`-- we'll come back to that shortly.
:::

---

##  {#write-grouping-selector data-menu-title="Write grouping selector"}

[Write a `<h1>` and `<h2>` grouping selector]{.slide-title}
<!-- We can use a grouping selector! -->
<hr>

```{sass filename="styles.scss"}
#| eval: false
#| echo: true
#| code-line-numbers: "29-32"
/*-- scss:defaults --*/

// Colors
$dark-green: #858E79;
$light-green: #D1D9CE;
$cream: #FDFBF7;
$gray: #64605f;
$purple: #9158A2;
$orange: #ad7237;

// Base document colors
$navbar-bg: $cream; // navbar
$navbar-fg: $dark-green; // navbar foreground elements
$navbar-hl: $purple; // highlight color when hovering over navbar links
$body-bg: $light-green; // page background 
$body-color: $gray; // page text 
$footer-bg: $cream; // footer 
$link-color: $purple; // hyperlinks 

// Inline code
$code-bg: $cream; // inline code background color
$code-color: $purple; // inline code text color

// Code blocks
$code-block-bg: $cream; // code block background color 

/*-- scss:rules --*/

h1, h2 {
  letter-spacing: 5px;
  font-weight: 800; # Google fonts tells you which weights your chosen font family allows for!
}
```

::: {.footer}
**Note:** We don't need to make any changes to the HTML (in `index.qmd`, `about.qmd`, and `resources.qmd`) since this grouping selector targets *all* `<h1>` and `<h2>` elements across the site. If an element on any of the pages has either of those tags, it will get styled according to the declaration(s) included in our CSS rule.
:::

---

##  {#preview-grouping-selector data-menu-title="Preview grouping selector"}

[Preview your updated styling]{.slide-title}

<hr>

<br>

Our updated `<h1>` and `<h2>` elements should now look like this:

:::: {.columns}
::: {.column width="50%"}

```{r}
#| eval: true 
#| echo: false
#| fig-align: "center"
#| out-width: "100%" 
knitr::include_graphics("images/without-header-styling.png")
```

::: {.body-text-s .gray-text .center-text .topbr}
No CSS styling on `h1` and `h2` headers
:::
:::
::: {.column width="50%"}

```{r}
#| eval: true 
#| echo: false
#| fig-align: "center"
#| out-width: "100%" 
knitr::include_graphics("images/with-header-styling.png")
```

::: {.body-text-s .gray-text .center-text .topbr}
With CSS styling on `h1` and `h2` headers
:::
:::
::::

---

##  {#predefined-title-class data-menu-title="Predefined 'title' class"}

[Recall those `.title` class selectors we noted earlier?]{.slide-title3}

<hr>

[We noted that the page titles ("Samantha Csik" on the landing page, "About" on the About page and "All my favorite resources!" on the Resources page), are all `<h1>` elements *and* are also given the class, `title` (e.g. `<h1> class="title">All of my favorite resources!</h1>`). This means that the Quarto framework has already defined a class selector called `.title` and applied that class to the above elements.]{.body-text-s}

```{r}
#| eval: true
#| echo: false
#| out-width: "100%"
#| fig-align: "center"
knitr::include_graphics("images/title-class.png")
```

---

##  {#modify-title-class data-menu-title="Modify 'title' class"}

[We can modify existing class (or ID) selectors]{.slide-title2}

<hr>

For example, let's make any text elements that are assigned the class, `.title`, the color maroon:

```{sass filename="styles.scss"}
#| eval: false
#| echo: true
#| code-line-numbers: "34-36"
/*-- scss:defaults --*/

// Colors
$dark-green: #858E79;
$light-green: #D1D9CE;
$cream: #FDFBF7;
$gray: #64605f;
$purple: #9158A2;
$orange: #ad7237;

// Base document colors
$navbar-bg: $cream; // navbar
$navbar-fg: $dark-green; // navbar foreground elements
$navbar-hl: $purple; // highlight color when hovering over navbar links
$body-bg: $light-green; // page background 
$body-color: $gray; // page text 
$footer-bg: $cream; // footer 
$link-color: $purple; // hyperlinks 

// Inline code
$code-bg: $cream; // inline code background color
$code-color: $purple; // inline code text color

// Code blocks
$code-block-bg: $cream; // code block background color 

/*-- scss:rules --*/

h1, h2 {
  letter-spacing: 5px;
  font-weight: 800; 
}

.title {
  color: maroon;
}
```

---

##  {#maroon-titles data-menu-title="Maroon titles"}

[Check out your new maroon `title`s]{.slide-title}

<hr>

[**It's important to note that we didn't need to make any changes to the HTML** (in `index.qmd`, `about.qmd`, and `resources.qmd`) since those `<h1>` elements are *already* assigned the class, `title`. Updates are automatically applied to any elements that the Quarto framework has already assigned as that class.]{.body-text-s}

<br>

```{r}
#| eval: true 
#| echo: false
#| fig-align: "center"
#| out-width: "100%" 
knitr::include_graphics("images/maroon-text.gif")
```

---

##  {#non-titles data-menu-title="Elements w/o title class"}

[Can we apply the `title` class to other elements?]{.slide-title2}

<hr>

Yes! To demonstrate, let's write a couple of HTML elements that *are not by default* assigned the `title` class to see what happens -- in other words, let's apply the `title` class to some elements beyond just our website's landing page name and page titles. I'll do this on my **About** page (`about.qmd`):

<br>

```{r filename="about.qmd"}
#| eval: false
#| echo: true
#| code-line-numbers: "5-11"
---
title: "About"
---

<h1>this is an `<h1>` element</h1> # alternatively, you can write <h1> elements using markdown (`# this is an `<h1>` element`)

<h1 class="title">this is an `<h1>` element of class `title`</h1>

<p>this is a `<p>` element</p>

<p class="title">this is a `<p>` element of class `title`</p>
```

::: {.footer}
**Reminder:** Use the syntax, `<tag class="class-name">Content</tag>`, to apply a class selector to an HTML element. 
:::

---

##  {#about-page-html data-menu-title="Write some HTML on About page"}

[Class selectors allow us fine-tuned control over styling]{.slide-title3}

<hr>

[Class selectors allow us to customize exactly how CSS rules apply to particular elements. In this example, only `<h1>` elements that are assigned the class, `title`, are colored maroon. Any `<h1>` elements that are not assigned the class, `title`, are styled according to our `h1, h2 {}` element selector.]{.body-text-s}

[Note that we can also apply the `title` class to *any* text element (not *just* `<h1>` elements). In this example, we apply it both to an `<h1>` element and a `<p>` element.]{.body-text-s}

```{r}
#| eval: true 
#| echo: false
#| fig-align: "center"
#| out-width: "100%" 
knitr::include_graphics("images/h1-title.png")
```

---

##  {#write-own-class-selector data-menu-title="Write your own class selectors"}

[We can also write our own class selectors]{.slide-title}

<hr>

Let's first create two different classes: one to center text on the page, and another to color text orange:
<!-- Then, we'll add elements to our **Resources** page (`resources.qmd`) to test out our new class selectors: -->

```{sass filename="styles.scss"}
#| eval: false
#| echo: true
#| code-line-numbers: "41-47"
/*-- scss:defaults --*/

// Import fonts
@import url('https://fonts.googleapis.com/css2?family=Nunito:ital,wght@0,200..1000;1,200..1000&family=Sen:wght@400..800&display=swap');

// Colors
$dark-green: #858E79;
$light-green: #D1D9CE;
$cream: #FDFBF7;
$gray: #64605f;
$purple: #9158A2;
$orange: #ad7237;

// Base document colors
$navbar-bg: $cream; // navbar
$navbar-fg: $dark-green; // navbar foreground elements
$navbar-hl: $purple; // highlight color when hovering over navbar links
$body-bg: $light-green; // page background 
$body-color: $gray; // page text 
$footer-bg: $cream; // footer 
$link-color: $purple; // hyperlinks 

// Inline code
$code-bg: $cream; // inline code background color
$code-color: $purple; // inline code text color

// Code blocks
$code-block-bg: $cream; // code block background color 

/*-- scss:rules --*/

h1, h2 {
  letter-spacing: 5px;
  font-weight: 800;
}

.title {
  color: maroon;
}

.center-text {
  text-align: center;
}

.orange-text {
  color: $orange;
}
```

---

##  {#write-resources-html data-menu-title="Write HTML for Resources page"}

[Write some HTML elements and apply class selectors]{.slide-title3}

<hr>

<br>

Next, let's write a few different elements in `resources.qmd` and apply our custom class selectors: 

<br>

```{r filename="resources.qmd"}
#| eval: false
#| echo: true
#| code-line-numbers: "5-13"

---
title: "All my favorite resources!"
---

<p class="orange-text">This paragraph is orange.</p>
  
<p class="center-text">This paragraph is centered.</p>
  
<p>This paragraph has no styling.</p>

<h2 class="center-text">This level-2 header is centered</h2>
```

::: {.footer}
**Don't forget:** Unlike element selectors, **class selectors must be applied to the elements that we want to style** (meaning, we need to update our HTML!).
:::

---

##  {#orange-center-text data-menu-title="Oranged / centered text"}

[Check out your new orange / centered text]{.slide-title}

<hr>

<br>

```{r}
#| eval: true 
#| echo: false
#| fig-align: "center"
#| out-width: "60%" 
knitr::include_graphics("images/orange-center.png")
```

---

##  {#apply-two-class-selectors data-menu-title="Apply two class selectors"}

[Elements can have more than one class selector]{.slide-title2}

<hr>

Simply list the names of the class selectors one after the next inside `""` -- for example, `<tag class="class1 class2">Content</tag>`.

<br>

```{r filename="resources.qmd"}
#| eval: false
#| echo: true
#| code-line-numbers: "13-15"

---
title: "All my favorite resources!"
---
  
<p class="orange-text">This paragraph is orange.</p>
  
<p class="center-text">This paragraph is centered.</p>
  
<p>This paragraph has no styling.</p>

<h2 class="center-text">This level-2 header is centered</h2>
  
<h2 class="center-text orange-text">This level-2 header is both centered and orange</h2>
  
<p class="orange-text">**This paragraph is orange and bolded using markdown syntax (yes, you can combine markdown and html!).**</p>
```

---

##  {#two-classes data-menu-title="2+ classes"}

[Admire your updated page!]{.slide-title}

<hr>

<br>

```{r}
#| eval: true 
#| echo: false
#| fig-align: "center"
#| out-width: "60%" 
knitr::include_graphics("images/two-classes.png")
```

---

##  {#quarto-syntax data-menu-title="Quarto Syntax"}

[Quarto also provides its [own syntax](https://quarto.org/docs/authoring/markdown-basics.html#divs-and-spans) for applying classes to elements]{.slide-title3}

<hr>

<br>

You can create both **divs (block-level regions of content)** and **spans (inline content)** using Quarto's syntax. For example:

<br>

:::: {.columns}

::: {.column width="50%"}
::: {.center-text}
**Divs**
:::

```{.md}
# Quarto syntax
::: {.my-selector}
Some element (e.g. text) to style
:::
  
# HTML syntax
<div class="my-selector">
  Some element (e.g. text) to style
</div>
```
:::

::: {.column width="50%"}
::: {.center-text}
**Spans**
:::

```{.md}
# Quarto syntax
Some text with just [this section]{.my-selector} styled

# HTML syntax
<p>Some text with just <span class="my-selector">this section</span> styled</p>
```
:::

::::

---

##  {#mix-match data-menu-title="Mix & match styles"}

[You can mix and match syntaxes in `.qmd` files]{.slide-title2}

<hr>

I tend to use a mix of both approaches (HTML & Quarto syntax). An example:

```{md filename="resources.qmd"}
#| eval: false
#| echo: true

---
title: "All my favorite resources!"
---

<p class="orange-text">Here is some orange text.</p>

<p>And here is some normal text beneath it.</p>

[Here is more orange text written using Quarto's syntax]{.orange-text}

Also note that I do not need to wrap this text in the `<p>` tag in order for it to render as normal text. `.qmd` files allow us to seamlessly blend markdown syntax with HTML.
```

::: {.footer}
Screenshot not included, but feel free to copy this content into your `resources.qmd` file to check out how it renders!
:::

---

##  {#couple-more-tips data-menu-title="A couple more styling tips" background="#047C90"}

<div class="page-center">
<center><div class="custom-subtitle2">Let's close out this section with just a couple more tips...</div></center>
</div>

---

##  {#more-fonts data-menu-title="More than 1 font family"}

[Want to use more than one font family?]{.slide-title}

<hr>

<br>

[Recall that we:]{.body-text-m} 

[**(a)**]{.teal-text} imported two font families from Google Fonts -- [Nunito](https://fonts.google.com/specimen/Nunito?query=nunito) and [Sen](https://fonts.google.com/specimen/Sen?query=sen) (though you can import and use as many as you'd like), and

[**(b)**]{.teal-text} set Nunito as our `mainfont` in `_quarto.yml` (which applies Nunito as the default font for all text elements). 

<br>

. . . 

[To also apply Sen, we can:]{.body-text-m} 

[**(a)**]{.teal-text} create a Sass variable for Sen, then 

[**(b)**]{.teal-text} write a CSS rule(s) to apply Sen to our desired text elements.

---

##  {#font-family-value data-menu-title="font-family value"}

[Google Fonts provides us with helpful code]{.slide-title}

<hr>

Look for the code chunk titled, **Sen: CSS class for a variable style** on the **Embed code** page. We'll want to grab the value specified after the **`font-family` property** (here, that value is, `"Sen", sans-serif;`). 

```{r}
#| eval: true 
#| echo: false
#| fig-align: "center"
#| out-width: "100%" 
knitr::include_graphics("images/sen-font-family.png")
```

---

##  {#sen-sass data-menu-title="Create Sen Sass / CSS"}

[Create a Sass variable, then craft some CSS]{.slide-title2}

<hr>

[Here, we create a CSS grouping selector, which applies Sen to any HTML header (`<h1>` - `<h6>`):]{.body-text-s}

```{sass filename="styles.scss"}
#| eval: false
#| echo: true
#| code-line-numbers: "6-7|35-37"

/*-- scss:defaults --*/

// Import fonts
@import url('https://fonts.googleapis.com/css2?family=Nunito:ital,wght@0,200..1000;1,200..1000&family=Sen:wght@400..800&display=swap');

// Fonts
$sen: "Sen", sans-serif;

// Colors
$dark-green: #858E79;
$light-green: #D1D9CE;
$cream: #FDFBF7;
$gray: #64605f;
$purple: #9158A2;
$orange: #ad7237;

// Base document colors
$navbar-bg: $cream; // navbar
$navbar-fg: $dark-green; // navbar foreground elements
$navbar-hl: $purple; // highlight color when hovering over navbar links
$body-bg: $light-green; // page background 
$body-color: $gray; // page text 
$footer-bg: $cream; // footer 
$link-color: $purple; // hyperlinks 

// Inline code
$code-bg: $cream; // inline code background color
$code-color: $purple; // inline code text color

// Code blocks
$code-block-bg: $cream; // code block background color 

/*-- scss:rules --*/

h1, h2, h3, h4, h5, h6 {
  font-family: $sen;
}

h1, h2 {
  letter-spacing: 5px;
  font-weight: 800;
}

.title {
  color: maroon;
}

.center-text {
  text-align: center;
}

.orange-text {
  color: $orange;
}
```

---

##  {#sen-rendered data-menu-title="Sen rendered"}

[Sen is now applied to all of our website headers!]{.slide-title2}

<hr>

```{r}
#| eval: true 
#| echo: false
#| fig-align: "center"
#| out-width: "100%" 
knitr::include_graphics("images/rendered-sen.gif")
```

---

##  {#resize-logo data-menu-title="Resize logo"}

[Final touch: resize our logo]{.slide-title}

<hr>

[Let's add a CSS rule to increase the size of our logo. Be sure to add this rule beneath your `/*-- scss:rules --*/` region decorator, and note that you may need to adjust the `max-height` value to best suit your own personal logo:]{.body-text-s}

```{sass}
#| eval: false
#| echo: true
#| code-line-numbers: false
.navbar-brand img { 
  max-height: 50px;
  width: auto;
}
```

```{r}
#| eval: true 
#| echo: false
#| fig-align: "center"
#| out-width: "100%" 
knitr::include_graphics("images/large-logo.png")
```

---

##  {#adapt-css data-menu-title="Adapting CSS from others"}

[How did I figure that CSS rule out??]{.slide-title}

<hr>

Great question! I adapted it from someone else's open source code, which was available on GitHub {{< fa face-smile-beam title="a smiling face with happy, squinty eyes" >}} This process often involves some trial and error, but it's one of the best ways to learn from the many awesome folks who openly share their work.

More specifically, I stumbled upon [Robert Mitchell's personal website](https://robertmitchellv.com/) (built with Quarto) and noticed that he too had a logo, *and* that it was perfectly sized to fit the navbar space:

```{r}
#| eval: true
#| echo: false
#| out-width: "100%"
#| fig-align: "center"
knitr::include_graphics("images/mitchell-website.png")
```

---

##  {#trial-error data-menu-title="Adapting CSS -- trial & error"}

[Figuring things out requires some trial and error]{.slide-title2}

<hr>

Here's what that looked like: 

1. I inspected the logo using Google Chrome's [DevTools](https://developer.chrome.com/docs/devtools) (**right click** > **Inspect**).

2. DevTools opened to some HTML which linked to the logo PNG file and had the class `navbar-logo` (this seemed like a reasonable place to start).

3. I hopped over to Robert's [`custom.scss` file](https://github.com/robertmitchellv/robertmitchellv.github.io/blob/main/custom.scss) and searched for `navbar-logo`. This didn't yield any matches.

4. I returned to the DevTools pane and hovered over the HTML directly above my first attempt (hovering over this new HTML still highlighted the website logo, so I assumed it was targeting the right element). Here, I noticed the class `navbar-brand`.

5. I jumped back to the `custom.scss` file -- this time, a search for `navbar-brand` led me to the [CSS rule](https://github.com/robertmitchellv/robertmitchellv.github.io/blob/main/custom.scss#L215-L218) used to adjust the size of the logo.

6. (Not shown in gif) Finally, I tried copying this rule over to my own stylesheet to test it out (and hope that it actually works)! I had to tweak the max-height to work for *my* logo.

::: {.center-text .body-text-m .teal-text}
A gif of the process is shown on the next slide.
:::

---

```{r}
#| eval: true
#| echo: false
#| out-width: "100%"
#| fig-align: "center"
knitr::include_graphics("images/mitchell-logo.gif")
```

<br>

::: {.center-text}
This is also the *perfect* segue into our very last section...
:::



