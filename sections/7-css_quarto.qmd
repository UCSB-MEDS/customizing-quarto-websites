---
format: revealjs
---

##  {#css-quarto data-menu-title="CSS + Quarto" background="#053660"}

<div class="page-center">
<div class="custom-subtitle">`r fontawesome::fa("question", fill = "#d2e3f3", a11y = "sem")` Okay, but what about Quarto?</div>
</div>

---

##  {#styles.css data-menu-title="Quarto comes with `styles.css`"}

<div class="slide-title">When you create a new Quarto site, it automatically creates a `styles.css` file</div>

:::: {.columns}
::: {.column width="50%"}
<br>
<center><img src="images/quarto_files.png" width="500"/></center>
:::
::: {.column width="50%"}
<br>
<div class="body-text">We can write our CSS rules in `styles.css`, *but alternatively*, we can write them directly in our `mystyles.scss` file (remember, you can write CSS in a `.scss` file but you can't write Sass in a `.css` file). You can delete `styles.css` if you don't plan to use it, or leave it be (it's easy to create a new one using the `touch` command in your terminal).</div>
:::
::::

---

##  {#scss-div data-menu-title="SCSS rules divider"}

<div class="slide-title">Create a section for defining CSS rules in `mystyles.scss`</div>

<div class="body-text topbr">To start defining CSS rules in `mystyles.scss` you first need to add the `/*-- scss:rules --*/` section divider beneath your Sass variables section:</div>

```{css}
#| eval: false
#| echo: true
#| code-line-numbers: "11"

/*-- scss:defaults --*/
// Fonts
@import url('https://fonts.googleapis.com/css2?family=Nunito:wght@300&display=swap');

// Colors
$light-sage-green: #D1D9CE;
$dark-sage-green: #98A08D;

// additional Sass variables omitted for brevity

/*-- scss:rules --*/
```

<div class="body-text topbr">Next, we'll walk through some examples of how to modify your site with your own CSS rules.</div>

---

##  {#determine-element-to-style data-menu-title="Determine element(s) to style"}

<p class="slide-title">Determine which element you want to style</p>

<div class="body-text topbr">Let's say I want to similarly style (add spacing between each letter, increase the font weight, make a dark gray color) the following text on my website:</div>

:::: {.columns}
::: {.column width="33%"}
<center><img src="images/index-font.png" width="500"/></center>
<center><div class="caption-text gray-text topbr">On my landing page, I want to style my name, "samantha csik", and the three section headers, "hi there!", "education", and "experience"</div></center>
:::
::: {.column width="33%"}
<center><img src="images/about-font.png" width="500"/></center>
<center><div class="caption-text gray-text topbr">On my about page, I want to style the top header, "about"</div></center>
:::
::: {.column width="33%"}
<center><img src="images/resources-font.png" width="500"/></center>
<center><div class="caption-text gray-text topbr">On my resources page, I want to style the top header, "resources"</div></center>
:::
::::

---

##  {#dont-know-element data-menu-title="Don't know element?"}

<p class="slide-title">But what if I don't know what HTML element type this is? Inspect!</p>

:::: {.columns}
::: {.column width="50%"}
<br>
<center><img src="images/inspect.gif" width="500"/></center>
:::
::: {.column width="50%"}
<div class="caption-text topbr">Using the *Inspect* tool is a great way to get a better sense of how CSS is used to modify particular HTML elements (this works with any web page, and *also* your locally hosted website preview).</div>

<div class="caption-text topbr">In your website preview, *right click* on an element of interest (in this case, let's start with my name, "samantha csik") and choose *Inspect* to pull up the underlying HTML & CSS files.</div>

<div class="caption-text topbr">Hovering your mouse over different lines of HTML highlights the corresponding element on your webpage.</div>
:::
::::

---

##  {#inspect-name data-menu-title="Inspect landing page name"}

<center><p class="large-body-text">My name is an `<h1>` element</p></center>

<center><img src="images/inspect-name.png" width="750"/></center>

<center><div class="caption-text gray-text">**Note:** This `<h1>` element also has a class `title` -- more on that in a minute.</div></center> 

---

##  {#inspect-landing-page-sections data-menu-title="Inspect landing page sections"}

<center><p class="large-body-text">My landing page section, "education" (as well as "hi there!" and "experience") are `<h3>` elements</p></center>

<center><img src="images/inspect-education.png" width="750"/></center>

---

##  {#inspect-about data-menu-title="Inspect about page"}

<center><p class="large-body-text">My about page title (as well as my resource page title) are `<h1>` elements</p></center>

<center><img src="images/inspect-about.png" width="750"/></center>

---

##  {#write-grouping-selector data-menu-title="Write a CSS grouping selector"}

<center><p class="slide-title">Write a CSS grouping selector to style `<h1>` and `<h3>` elements</p></center>

::: {.panel-tabset}

## `mystyles.scss` file

<div class="body-text topbr bottombr">Here, we have a grouping selector that targets *all* `<h1>` and `<h3>` elements -- it increases both the spacing between each letter and the font weight (makes it bolder), and it colors those header levels gray (reminder: I created a Sass variable: `$gray: #64605f;`).</div>

```{css}
#| eval: false
#| echo: true
/*-- scss:rules --*/

h1, h3 {
  letter-spacing: 5px;
  font-weight: 700;
  color: $gray;
}
```

## Output

:::: {.columns}
::: {.column width="50%"}
<center><img src="images/without-header-styling.png" width="500"/></center>
<center><div class="caption-text gray-text topbr">No CSS styling on `h1` and `h3` headers</div></center>
:::
::: {.column width="50%"}
<center><img src="images/with-header-styling.png" width="500"/></center>
<center><div class="caption-text gray-text topbr">With CSS styling on `h1` and `h3` headers</div></center>
:::
::::

## Notes

<div class="body-text">`r fontawesome::fa("angle-right", fill = "#05859B", a11y = "sem")` I don't need to make any changes to the HTML (in `index.qmd`, `about.qmd`, and `resources.qmd` since this grouping selector targets *all* `<h1>` and `<h3>` elements across my site. If an element on any of my pages has either of those tags, it will get styled with the declarations included in our CSS rule.</div>

:::

---

##  {#title-class data-menu-title="'title' class"}

<center><p class="slide-title">What's with that `title` class selector?</p></center>

<div class="caption-text topbr">Note how the page headers ("samantha csik" on the landing page, and "about" and "resources" on those respective pages), which all happen to be `<h1>` elements, are also of class `title`.</div>

<div class="caption-text topbr">The Quarto framework has defined a class selector called `.title` and applied that class to the above elements. We can modify it however we'd like. For example, let's turn text elements of class `title` the color red:</div> 

::: {.panel-tabset}

## `mystyles.scss` file
```{css}
#| eval: false
#| echo: true
/*-- scss:rules --*/

h1, h3 {
  letter-spacing: 5px;
  font-weight: 700;
  color: $gray;
}

.title {
  color: red;
}
```

## Output

:::: {.columns}
::: {.column width="33%"}
<center><img src="images/red-name.png" width="500"/></center>
:::
::: {.column width="33%"}
<center><img src="images/red-about.png" width="500"/></center>
:::
::: {.column width="33%"}
<center><img src="images/red-resources.png" width="500"/></center>
:::
::::

## Notes

<div class="body-text">`r fontawesome::fa("angle-right", fill = "#05859B", a11y = "sem")` In this case, I don't need to make any changes to the HTML (in `index.qmd`, `about.qmd`, and `resources.qmd`) since those `<h1>` elements *already* are assigned the class `title`.</div>

:::

---

##  {#title-class2 data-menu-title=""}

<p class="slide-title">Okay, but what about `<h1>` elements that are not of class `title`?</p>

<div class="body-text topbr">Let's write a couple other `<h1>` elements that *are not* of `class="title"` to see what happens. I'll do this on my *about* page:</div>

::: {.panel-tabset}

## `about.qmd` file

```{r}
#| eval: false
#| echo: true
#| code-line-numbers: "5-11"
---
title: "about"
---

<h1>this is an `<h1>` element</h1> # alternatively, you can write <h1> elements using markdown (`# this is an `<h1>` element`)

<h1 class="title">this is an `<h1>` element of class `title`</h1>

<p>this is a `<p>` element</p>

<p class="title">this is a `<p>` element of class `title`</p>
```

## Output

<center><img src="images/h1-title.png" width="500"/></center>

## Notes

<div class="caption-text topbr">`r fontawesome::fa("angle-right", fill = "#05859B", a11y = "sem")` You can add elements on your web pages using either RMarkdown/Markdown syntax (e.g. use `# text here` to denote an `<h1>` element) *or* use HTML tags (e.g. use `<h1>text here</h1>`). I tend to use a mix of both Markdown syntax and HTML tags.</div>

<div class="caption-text topbr">`r fontawesome::fa("angle-right", fill = "#05859B", a11y = "sem")` Class selectors allow us to customize exactly how CSS rules apply to particular elements. In this example, only `<h1>` elements that are of class `title` are colored red. Any `<h1>` elements that are not of class `title` are styled according to our `h1, h3 {}` element selector.</div>

<div class="caption-text topbr">`r fontawesome::fa("angle-right", fill = "#05859B", a11y = "sem")` We can apply the `title` class to any text element. In this example, we apply it both to an `<h1>` element and a `<p>` element.</div>

:::

---

##  {#write-own-class-selector data-menu-title="Write your own class selector"}

<p class="slide-title">Write your own class selector</p>

::: {.panel-tabset}

## `mystyles.scss` file

<p class="body-text bottombr">Let's create a class named `custom-subtitle` that styles text in the following ways: increases font size, italicizes it, and colors it purple. We can then add an element to our **resources** page and apply our new class selector:</p>

```{css}
#| eval: false
#| echo: true
#| code-line-numbers: "13-17"
/*-- scss:rules --*/

h1, h3 {
  letter-spacing: 5px;
  font-weight: 700;
  color: $gray;
}

.title {
  color: red;
}

.custom-subtitle {
  font-size: 22px;
  font-style: italic;
  color: $purple;
}
```

## `resources.qmd` file

<p class="body-text bottombr">Here, I'm creating two paragraphs -- one that is styled as a `custom-subtitle` and one that is not.</p>

<p class="body-text bottombr">What happens if you create your custom subtitle using an `<h1>` tag instead of `<p>`? Why do you think this happens?</p>

```{r}
#| eval: false
#| echo: true
#| code-line-numbers: "5,7"

---
title: "resources"
---

<p class="custom-subtitle">Here is my custom subtitle.</p>

<p>And here is some normal text beneath it.</p>
```

## Output

<center><img src="images/custom-subtitle.png" width="500"/></center>

## Notes

<div class="body-text topbr">`r fontawesome::fa("angle-right", fill = "#05859B", a11y = "sem")` Remember, class selectors take the form `.selector-name {}`</div>

:::

---

##  {#apply-two-class-selectors data-menu-title="Apply two class selectors"}

<p class="slide-title">Apply a second class selector our text styled as a `custom-subtitle`</p>

::: {.panel-tabset}

## `mystyles.scss` file

<p class="caption-text bottombr">Let's say we want the option to add a bit of extra space beneath this particular custom subtitle before the element is rendered -- but maybe we don't *always* want that extra space beneath *every* custom subtitle. If we were to add a declaration that increases `margin-bottom` directly to our `.custom-subtitle` class selector, all elements of class `custom-subtitle` would have that extra space.</p>

<p class="caption-text bottombr">One solution, then, is to create a new class selector (we'll call it `.bottombr`, for "bottom break") that we can specifically apply to our custom subtitle on the **resources** page.</p>

```{css}
#| eval: false
#| echo: true
#| code-line-numbers: "10-12"
/*-- scss:rules --*/

/* Additional rules/electors omitted for brevity */

.custom-subtitle {
  font-size: 22px;
  font-style: italic;
  color: $purple;
}

.bottombr {
  margin-bottom: 3em;
}
```

## `resources.qmd` file

<p class="body-text bottombr">Here, we add our `bottombr` class selector within the `""` after `custom-subtitle` and a space.</p>

```{r}
#| eval: false
#| echo: true
#| code-line-numbers: "5"
---
title: "resources"
---

<p class="custom-subtitle bottombr">Here is my custom subtitle.</p>

<p>And here is some normal text beneath it.</p>
```

## Output

<center><img src="images/bottombr.png" width="500"/></center>

## Notes

<div class="body-text topbr">`r fontawesome::fa("angle-right", fill = "#05859B", a11y = "sem")` Remember, HTML elements can have more than one class, e.g. `<p class="class1 class2 etc">`</div>

:::

---

##  {#quarto-syntax data-menu-title="Quarto Syntax"}

<p class="slide-title">Apply class selectors to page elements using Quarto's own syntax</p>

<p class="caption-text bottombr">The following will be rendered the same way:</p> 

<p class="caption-text bottombr">`<tag class="myclass">Some text</tag>` == `[Some text]{.myclass}`</p>

<p class="caption-text bottombr">I tend to use a mix of both approaches (HTML & Quarto syntax). In some situations using Quarto's `[]{}` feels cleaner. In other situations, I can get finer control over the styling of elements using HTML.</p>

::: {.panel-tabset}

## `resources.qmd` file

```{r}
#| eval: false
#| echo: true

---
title: "resources"
---

<p class="custom-subtitle">Here is my custom subtitle.</p>

<p>And here is some normal text beneath it.</p>

[Here is another custom subtitle written with Quarto syntax]{.custom-subtitle}

Also note that I do not need to wrap this text in the `<p>` tag in order for it to render as normal text. `.qmd` files allow us to seamlessly blend markdown syntax with HTML.
```

## Output

<center><img src="images/quarto-css-syntax.png" width="500"/></center>

## Notes

<div class="caption-text">`r fontawesome::fa("angle-right", fill = "#05859B", a11y = "sem")` You'll notice the `[]{}` syntax throughout Quarto's documentation, and also if you explore the source code of other Quarto websites/presentations/etc. You don't *need* to use it, but it helps to know what it is when you see it!</div>

:::

