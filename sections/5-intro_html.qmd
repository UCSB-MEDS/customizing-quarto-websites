---
format: revealjs
---

##  {#light-intro-html data-menu-title="Light intro to HTML" background="#053660"}

<div class="page-center">
<div class="custom-subtitle">A *light* introduction to HTML `r fontawesome::fa("html5", fill = "#d2e3f3", a11y = "sem")`</div>
</div>

---

##  {#html-elements1 data-menu-title="HTML elements"}

[HTML elements]{.slide-title}

<hr>

::: {.body-text .topbr}
HTML consists of a series of [elements](https://www.w3schools.com/html/html_elements.asp) comprising **start tags** and **end tags** that render some form of content in a particular way.
:::

:::: {.columns}
::: {.column width="70%"}

::: {.body-text .center-text}
**The basic anatomy of an HTML element:**
:::

```{r}
#| eval: true 
#| echo: false
#| fig-align: "center"
#| out-width: "90%" 
knitr::include_graphics("images/html_element.png")
```

:::
::: {.column width="30%"}
<br> 
<br>

::: {.caption-text}
In Markdown syntax, this HTML element would be written as: <br> `# Welcome to your website customization workshop`
:::

:::
:::

::: {.caption-text .gray-text .center-text .topbr}
**Note:** Some HTML elements have no content (e.g. the `<br>`, or "break" element) -- these are called *empty* elements and do not have an end tag.
:::

---

##  {#html-elements2 data-menu-title="Commonly used HTML tags"}

[Commonly used HTML tags]{.slide-title}

<hr>

::: {.body-text .center-text .topbr}
Browse a complete [list of HTML tags](https://www.w3schools.com/tags/default.asp).
:::

| Tag                 | What it does                                                 |
|---------------------|--------------------------------------------------------------|
| `<div></div>`       | defines a division or section in an HTML document            |
| `<h1></h1>`         | create a first-level heading (largest)                       |
| `<h6></h6>`         | create a sixth-level heading (smallest)                      |
| `<p></p>`           | begin a new paragraph                                        |
| `<strong></strong>` | bold text                                                    |
| `<em></em>`         | italicized text                                              |
| `<img></img>`       | present an image                                             |
| `<a></a>`           | define a hyperlink                                           |
| `<br>`              | add a line break (empty element)                             |
| `<span></span>`     | an inline container used to markup part of a text or document|

---

##  {#nested-html-elements data-menu-title="Nested HTML elements"}

[HTML nested elements]{.slide-title}

<hr>

::: {.body-text .topbr}
You can also *nest* elements. Remember to close out tags from the inside-out to avoid unexpected renderings.
:::

:::: {.columns}
::: {.column width="70%"}

::: {.body-text .center-text}
**Nested HTML elements:**
:::

```{r}
#| eval: true 
#| echo: false
#| fig-align: "center"
#| out-width: "90%" 
knitr::include_graphics("images/nested_html_elements.png")
```

:::
::: {.column width="30%"}
<br> 
<br>

::: {.caption-text}
In Markdown syntax, this HTML element would be written as: <br> `# Welcome to your **website customization** workshop`
:::

:::
::::

::: {.caption-text .topbr}
<div class="important-text-bg">*Important:* Take extra care to never skip (or incorrectly type) an end tag! Some elements will still display correctly if you forget an end tag, but you cannot rely on this. Forgotten end tags will cause you headaches as you try troubleshoot unexpected results and errors `r fontawesome::fa("grin-beam-sweat", fill = "#222222", a11y = "sem")`.</div>
:::

---

##  {#html-attribures data-menu-title="HTML attributes"}

[HTML attributes can be used for targetted styling]{.slide-title-smallest}

<hr>

::: {.body-text .topbr}
[Attributes](https://www.w3schools.com/html/html_attributes.asp) provide extra information about elements. They are always **specified in the start tag** and usually come in **value/name pairs** (e.g. `attributeName="attributeValue"`).
:::

::: {.body-text .topbr}
<div class="body-text">Attributes can be used for **targeted styling with CSS** (e.g. **`class`** or **`id`** attributes) -- more on this soon.</div>
:::

::: {.body-text .center-text}
**The basic anatomy of an HTML attribute:**
:::

```{r}
#| eval: true 
#| echo: false
#| fig-align: "center"
#| out-width: "90%" 
knitr::include_graphics("images/html_attribute.png")
```

---

##  {#html-practice0 data-menu-title="Practice HTML (0/2)" background="#053660"}

<div class="page-center vertical-center">
<p class="custom-subtitle bottombr">`r fontawesome::fa("laptop-code", fill = "#d2e3f3", a11y = "sem")` Practice writing some HTML `r fontawesome::fa("html5", fill = "#d2e3f3", a11y = "sem")`</p>
<p class="smaller-body-text">*In the following exercise, we’ll be creating a `.html` file (and eventually, a `.css` file to style it). This is meant only to help us familiarize ourselves with HTML syntax and does not have anything to directly do with our Quarto websites — feel free to delete this file(s) later, or keep as a reference!*</p>
</div>

---

##  {#html-practice1 data-menu-title="Practice HTML (1/2)"}

[Exercise: practice writing HTML (1/2)]{.slide-title}

<hr>

::: {.body-text .topbr}
You can use any text editor to do so (RStudio and VS Code work too!). The following steps assume you're working in RStudio. Later, we'll link an external (separate) CSS stylesheet within our HTML file to style our elements.
:::

::: {.caption-text .topbr}
**1.** Open an RProject (it's fine to work on your website branch!). In your terminal window, use the `touch` command to create an HTML file (for simplicity, I did this in my project's root directory), then choose **Open in Editor**.
:::

```{bash}
#| eval: false
#| echo: true
touch practice-html.html
```

. . .

::: {.caption-text .topbr}
**2.** Create the skeleton of your HTML file.
:::

```{html}
#| eval: false
#| echo: true
<!DOCTYPE html> <!-- All HTML docs start with a doc type declaration-->
<html> <!-- This tag represents the root of the HTML doc -->
<head> 
  <!-- Write any metadata about the HTML doc here (inluding the link to an external CSS file) -->
</head>
<body> 
  <!-- Write all the contents of the HTML doc here -->
</body>
</html>
```

---

##  {#html-practice2 data-menu-title="Practice HTML (2/2)"} 
<!-- auto-animate="true" -->

[Exercise: practice writing HTML (2/2)]{.slide-title}

<hr>

::: {.body-text .topbr}
Write some HTML! *We'll practice styling our HTML in the next section.*
:::

::: {.caption-text .topbr}
**3.** Create a level one header, two paragraphs (these can just be sentences), and a button  ([here's one good resource](https://www.w3docs.com/snippets/html/how-to-create-an-html-button-that-acts-like-a-link.html) on how to do that) that takes you to the MEDS website within the `<body>` of your html file.
:::

```{html}
#| eval: false
#| echo: true
#| code-line-numbers: "8-11"
<!DOCTYPE html> <!-- All HTML docs start with a doc type declaration-->
<html> <!-- This tag represents the root of the HTML doc -->
<head>
 <!-- Write any metadata about the HTML doc here (inluding the link to an external CSS file) -->
</head>
<body> 
  <!-- Write all the contents of the HTML doc here -->
  <h1>Here is my level one header</h1>
  <p>Here is my first paragraph</p>
  <p>Here is my second paragraph</p>
  <button type="button" onclick=window.location.href='https://ucsb-meds.github.io'>Go to MEDS website</button>
</body>
</html>
```

. . . 

::: {.caption-text .topbr}
**4.** Click on the **Preview** button at the top of your source pane to see the rendered output.
:::

```{r}
#| eval: true 
#| echo: false
#| fig-align: "center"
#| out-width: "30%" 
knitr::include_graphics("images/practice-html.png")
```


<!-- ##  {#html-practice3 data-menu-title="Practice HTML Solution (2/2)" auto-animate=true visibility="uncounted"} -->

<!-- [Exercise: practice writing HTML (2/2)]{.slide-title} -->

<!-- <hr> -->

<!-- ::: {.body-text .topbr} -->
<!-- Write some HTML! *We'll practice styling our HTML in the next section.* -->
<!-- ::: -->

<!-- ::: {.caption-text .topbr} -->
<!-- **3.** Create a level one header, a paragraph, and a button  ([here's one good resource](https://www.w3docs.com/snippets/html/how-to-create-an-html-button-that-acts-like-a-link.html) on how to do that) that takes you to the MEDS website within the `<body>` of your html file. -->
<!-- ::: -->

<!-- ```{html} -->
<!-- #| eval: false -->
<!-- #| echo: true -->
<!-- <!DOCTYPE html> <!-- All HTML docs start with a doc type declaration--> 
<!-- <html> <!-- This tag represents the root of the HTML doc --> 
<!-- <head> -->
<!--  <!-- Write any metadata about the HTML doc here (inluding the link to an external CSS file) --> 
<!-- </head> -->
<!-- <body>  -->
<!--   <!-- Write all the contents of the HTML doc here --> 
<!--   <h1>Here is my level one header</h1> -->
<!--   <p>Here is my first paragraph</p> -->
<!--   <p>Here is my second paragraph</p> -->
<!--   <button type="button" onclick=window.location.href='https://ucsb-meds.github.io'>Go to MEDS website</button> -->
<!-- </body> -->
<!-- </html> -->
<!-- ``` -->

<!-- ::: {.caption-text .topbr} -->
<!-- **4.** Click on the **Preview** button at the top of your source pane to see the rendered output. -->
<!-- ::: -->