---
format: revealjs
---

##  {#light-intro-html data-menu-title="Light intro to HTML" background="#053660"}

<div class="page-center">
<div class="custom-subtitle">A *light* introduction to HTML `r fontawesome::fa("html5", fill = "#d2e3f3", a11y = "sem")`</div>
</div>

---

##  {#html-elements1 data-menu-title="HTML elements"}

[HTML consists of a series of elements]{.slide-title}

<hr>

::: {.body-text .topbr}
[Elements](https://www.w3schools.com/html/html_elements.asp) comprise **start tags** and **end tags** that render some form of content in a particular way.
:::

:::: {.columns}
::: {.column width="70%"}

::: {.body-text .center-text}
**The basic anatomy of an HTML element:**
:::

```{r}
#| eval: true 
#| echo: false
#| fig-align: "center"
#| out-width: "90%" 
knitr::include_graphics("images/html_element.png")
```

:::
::: {.column width="30%"}
<br> 
<br>

::: {.caption-text}
In Markdown syntax, this HTML element would be written as: <br> `# Welcome to your website customization workshop`
:::

:::
:::

::: {.caption-text .gray-text .center-text .topbr}
**Note:** Some HTML elements have no content (e.g. the `<br>`, or "break" element) -- these are called *empty* elements and do not have an end tag.
:::

---

##  {#html-elements2 data-menu-title="Commonly used HTML tags"}

[Commonly used HTML tags]{.slide-title}

<hr>

::: {.body-text .center-text .topbr}
Browse a complete [list of HTML tags](https://www.w3schools.com/tags/default.asp).
:::

| Tag                 | What it does                                                 |
|---------------------|--------------------------------------------------------------|
| `<div></div>`       | defines a division or section in an HTML document            |
| `<h1></h1>`         | create a first-level heading (largest)                       |
| `<h6></h6>`         | create a sixth-level heading (smallest)                      |
| `<p></p>`           | begin a new paragraph                                        |
| `<strong></strong>` | bold text                                                    |
| `<em></em>`         | italicized text                                              |
| `<img></img>`       | present an image                                             |
| `<a></a>`           | define a hyperlink                                           |
| `<br>`              | add a line break (empty element)                             |
| `<span></span>`     | an inline container used to markup part of a text or document|

---

##  {#nested-html-elements data-menu-title="Nested HTML elements"}

[HTML elements can be *nested*]{.slide-title}

<hr>

::: {.body-text .topbr}
Remember to close out tags from the inside-out to avoid unexpected renderings.
:::

:::: {.columns}
::: {.column width="70%"}

::: {.body-text .center-text}
**Nested HTML elements:**
:::

```{r}
#| eval: true 
#| echo: false
#| fig-align: "center"
#| out-width: "90%" 
knitr::include_graphics("images/nested_html_elements.png")
```

:::
::: {.column width="30%"}
<br> 
<br>

::: {.caption-text}
In Markdown syntax, this HTML element would be written as: <br> `# Welcome to your **website customization** workshop`
:::

:::
::::

::: {.caption-text .topbr}
<div class="important-text-bg">*Important:* Take extra care to never skip (or incorrectly type) an end tag! Some elements will still display correctly if you forget an end tag, but you cannot rely on this. Forgotten end tags will cause you headaches as you try troubleshoot unexpected results and errors `r fontawesome::fa("grin-beam-sweat", fill = "#222222", a11y = "sem")`.</div>
:::

---

##  {#html-attribures data-menu-title="HTML attributes"}

[HTML attributes can be used for targetted styling]{.slide-title-smallest}

<hr>

::: {.body-text .topbr}
[Attributes](https://www.w3schools.com/html/html_attributes.asp) provide extra information about elements. They are always **specified in the start tag** and usually come in **value/name pairs** (e.g. `attributeName="attributeValue"`).
:::

::: {.body-text .topbr}
<div class="body-text">Attributes can be used for **targeted styling with CSS** (e.g. **`class`** or **`id`** attributes) -- more on this soon.</div>
:::

<!-- ::: {.body-text .center-text} -->
<!-- **The basic anatomy of an HTML attribute:** -->
<!-- ::: -->

```{r}
#| eval: true 
#| echo: false
#| fig-align: "center"
#| out-width: "90%" 
knitr::include_graphics("images/html_attribute.png")
```

---

##  {#write-html data-menu-title="Write HTML"}

[Let's take a look at some HTML]{.slide-title}

<hr>

::: {.panel-tabset}

## Write HTML

::: {.smaller-body-text .center-text}
*You can use any text editor to write HTML, but the following steps assume you're working in RStudio (you can continue to work on your branch in your website's project directory).*
:::

[**1.** In the RStudio Terminal, use the `touch` command to create an HTML file (for simplicity, I did this in my projectâ€™s root directory), then choose **Open in Editor**.]{.caption-text}

```{bash filename="Command line/RStudio Terminal"}
#| eval: false
#| echo: true
touch practice-html.html
```

[**2.** Type or copy/paste the following into your `practice-html.html` file:]{.caption-text}

```{html filename="practice-html.html"}
#| eval: false
#| echo: true
<!DOCTYPE html> <!-- All HTML docs start with a doc type declaration-->
<html> <!-- This tag represents the root of the HTML doc -->
<head>
 <!-- Write any metadata about the HTML doc here (inluding the link to an external CSS file) -->
</head>
<body> 
  <!-- Write all the contents of the HTML doc here -->
  <h1>Here is my level one header</h1>
  <p>Here is my first paragraph</p>
  <p>Here is my second paragraph, where you can read more about <a href="https://ucsb-meds.github.io/">MEDS</a>.</p>
  <p>This is very important text!</p>
</body>
</html>
```

## Render HTML

::: {.body-text .center-text}
Click **Preview** to render the HTML
:::

```{r}
#| eval: true 
#| echo: false
#| fig-align: "center"
#| out-width: "65%" 
knitr::include_graphics("images/rendered-practice-html.png")
```

:::

---

##  {#write-md data-menu-title="Write Markdown"}

[markdown makes it easy to "write" HTML]{.slide-title-smaller}

<hr>

::: {.smaller-body-text .center-text}
Quarto (`.qmd`) files allow us to write markdown, then *Render* that markdown as HTML (we can also write HTML directly in `.qmd` files).
:::

::: {.panel-tabset}

## Write markdown

[**1.** Now, use the `touch` command (or **New Blank File** > **Quarto Doc...** in the Files pane) to create a new `.qmd` file.]{.caption-text}

```{bash filename="Command line/RStudio Terminal"}
#| eval: false
#| echo: true
touch practice-markdown.qmd
```

[**2.** Type or copy/paste the following into your `practice-markdown.qmd` file:]{.caption-text}

```{.md filename="practice-markdown.qmd"}
# Here is my level one header

Here is my first paragraph

Here is my second paragraph, where you can read more about [MEDS](https://ucsb-meds.github.io/).

This is very important text!
```

## Render HTML

::: {.smaller-body-text .center-text}
Click **Render** to render the markdown as HTML (it will render it as a web page if you're in your website's project directory)
:::

```{r}
#| eval: true 
#| echo: false
#| fig-align: "center"
#| out-width: "55%" 
knitr::include_graphics("images/rendered-practice-markdown.png")
```

:::

